"""
To use:

1. Run:

$ python3 manage.py makemigrations --empty classification --name "blat_keys"
Migrations for 'classification':
  classification/migrations/0046_blat_keys.py


2. python3 manage.py blat_keys classification/migrations/0046_blat_keys.py

"""

import os
import re

from django.core.management.base import BaseCommand

from classification.models.evidence_key import EvidenceKey
from library.utils import local_date_string


class Command(BaseCommand):
    EMPTY_MIGRATION_LINES = 14

    def add_arguments(self, parser):
        parser.add_argument('--replace', action='store_true')
        parser.add_argument('migration_script')

    def handle(self, *args, **options):
        migration_script = options["migration_script"]
        replace = options["replace"]
        self.rewrite_migration_script(migration_script, replace)

    @staticmethod
    def get_dependency_lines(migration_script, replace):
        dependency_lines = []
        with open(migration_script) as f:
            lines = f.readlines()
            if not replace and len(lines) > Command.EMPTY_MIGRATION_LINES:
                msg = f"Expected empty migration to have {Command.EMPTY_MIGRATION_LINES} lines, was {len(lines)}. Use --replace to force"
                raise ValueError(msg)
            found_deps = False
            for line in lines:
                if found_deps:
                    if re.match("^\s+]$", line):
                        break
                    dependency_lines.append(line)
                elif re.match(r"^\s+dependencies = \[", line):
                    found_deps = True
                    continue

        return dependency_lines

    @staticmethod
    def rewrite_migration_script(migration_script, replace):
        this_script = os.path.basename(__file__)
        now = local_date_string()
        dependency_lines = Command.get_dependency_lines(migration_script, replace)
        dependencies = "".join(dependency_lines)

        evidence_keys_lines = []
        for ek_val in EvidenceKey.objects.all().order_by("pk").values():
            # format nicely and make at end of dict
            ek_val["created"] = str(ek_val.pop("created"))
            ek_val["modified"] = str(ek_val.pop("modified"))

            evidence_keys_lines.append(f"        EvidenceKey(**{ek_val}),")
        evidence_keys = "\n".join(evidence_keys_lines)
        new_script = f"""# Generated by {this_script} on {now}

from django.db import migrations

def blat_keys(apps, _schema_editor):
    EvidenceKey = apps.get_model("classification", "EvidenceKey")
    EvidenceKey.objects.all().delete()
    keys = [
{evidence_keys}
    ]
    EvidenceKey.objects.bulk_create(keys)

class Migration(migrations.Migration):

    dependencies = [
{dependencies}
    ]

    operations = [
        migrations.RunPython(blat_keys)
    ]
"""

        with open(migration_script, "w") as f:
            f.write(new_script)
