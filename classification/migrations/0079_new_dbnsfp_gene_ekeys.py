# Generated by Django 4.0.6 on 2022-08-11 02:19

from django.db import migrations


def _add_new_dbnsfp_gene_ekeys(apps, _schema_editor):
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    FLOAT = 'L'
    SELECT = 'S'

    category = 'H'  # Gene
    order_gene_predictions = 7  # from VAAST
    order_pre_gene_prediction = order_gene_predictions - 1
    order_gnomad = 10  # from gnomad_oe_lof

    # Move LoFTool to Gene Category (from computational prediction)
    EvidenceKey.objects.filter(pk='loftool').update(evidence_category=category, order=order_gene_predictions)

    new_ekeys = [
        # Put gnomAD ones next to other gnomAD OE/LOF
        EvidenceKey(
            **{'key': 'gnomad_pli', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_gnomad,
               'label': 'gnomAD prob LOF intolerant',
               'description': '"The probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants)" based on gnomAD 2.1 data',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "gnomad_pli"}),
        EvidenceKey(
            **{'key': 'gnomad_prec', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_gnomad,
               'label': 'gnomAD prob LOF HOM',
               'description': '"The probability of being intolerant of homozygous, but not heterozygous lof variants" based on gnomAD 2.1 data',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "gnomad_prec"}),
        EvidenceKey(
            **{'key': 'gnomad_pnull', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_gnomad,
               'label': 'gnomAD prob LOF tolerant',
               'description': '"The probability of being tolerant of both heterozygous and homozygous lof variants" based on gnomAD 2.1 data',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "gnomad_pnull"}),

        # Put prediction stuff together
        EvidenceKey(
            **{'key': 'gene_damage_index_score', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_gene_predictions,
               'label': 'GDI (Gene Damage Index Score)', 'see': 'https://www.pnas.org/doi/10.1073/pnas.1518646112',
               'description': 'A genome-wide, gene-level metric of the mutational damage that has accumulated in the general population. The higher the score the less likely the gene is to be responsible for monogenic diseases.',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "gene_damage_index_score"}),
        EvidenceKey(
            **{'key': 'phi', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_gene_predictions,
               'label': 'P(HI) (Probability haploinsufficiency)',
               'description': 'P(HI): Estimated probability of haploinsufficiency of the gene',
               'see': 'https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1001154',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "phi"}),
        EvidenceKey(
            **{'key': 'ghis', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_gene_predictions, 'see': 'https://academic.oup.com/nar/article/43/15/e101/2414292',
               'label': 'GHIS (Gene haploinsufficiency)',
               'description': 'GHIS: A score predicting the gene haploinsufficiency. The higher the score the more likely the gene is haploinsufficient.',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "ghis"}),
        EvidenceKey(
            **{'key': 'prec', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_gene_predictions, 'see': 'https://www.science.org/doi/10.1126/science.1215040',
               'label': 'P(rec) - Probability recessive disease gene',
               'description': 'P(rec): Estimated probability that gene is a recessive disease gene',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "prec"}),

        EvidenceKey(
            **{'key': 'hipred_score', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_gene_predictions,
               'see': 'https://academic.oup.com/bioinformatics/article/33/12/1751/2964486',
               'label': 'HiPred prob haploinsufficiency',
               'description': 'Estimated probability of haploinsufficiency of the gene',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "hipred_score"}),
        EvidenceKey(
            **{'key': 'gene_indispensability_score', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_gene_predictions,
               'see': 'https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1002886',
               'label': 'Gene Indispensability',
               'description': 'A probability prediction of the gene being essential',
               'examples': [0.1, 0.89], 'options': [],
               'evidence_category': category, 'value_type': FLOAT,
               'variantgrid_column_id': "gene_indispensability_score"}),

        # Put these together just before predictions
        EvidenceKey(
            **{'key': 'essential_gene_crispr', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_pre_gene_prediction, 'see': 'https://www.science.org/doi/10.1126/science.aac7041',
               'label': 'Essential Gene (CRISPR)',
               'description': 'Essential or Non-essential phenotype-changing based on large scale CRISPR experiments.',
               'examples': ["Essential"], 'options': [{'key': 'E', 'index': 1, 'label': 'Essential'},
                                                      {'key': 'N', 'index': 2, 'label': "Non-essential phenotype-changing"}],
               'evidence_category': category, 'value_type': SELECT,
               'variantgrid_column_id': "essential_gene_crispr"}),
        EvidenceKey(
            **{'key': 'essential_gene_crispr2', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_pre_gene_prediction, 'see': 'http://dx.doi.org/10.1016/j.cell.2015.11.015',
               'label': 'Essential Gene (CRISPR2)',
               'description': 'Essential ("E"), context-Specific essential ("S"), or Non-essential phenotype-changing ("N") based on large scale CRISPR experiments.',
               'examples': ["Essential"], 'options': [{'key': 'E', 'index': 1, 'label': 'Essential'},
                                                      {'key': 'N', 'index': 2, 'label': "Non-essential phenotype-changing"},
                                                      {'key': 'S', 'index': 3, 'label': "Context-Specific essential"}],
               'evidence_category': category, 'value_type': SELECT,
               'variantgrid_column_id': "essential_gene_crispr2"}),
        EvidenceKey(
            **{'key': 'essential_gene_gene_trap', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_pre_gene_prediction, 'see': 'https://pubmed.ncbi.nlm.nih.gov/26472760/',
               'label': 'Essential Gene (Gene Trap)',
               'description': 'Essential ("E"), HAP1-Specific essential ("H"), KBM7-Specific essential ("K"), or Non-essential phenotype-changing ("N"), based on large scale mutagenesis experiments.',
               'examples': ["Essential"], 'options': [{'key': 'E', 'index': 1, 'label': 'Essential'},
                                                      {'key': 'N', 'index': 2, 'label': "Non-essential phenotype-changing"},
                                                      {'key': 'H', 'index': 3, 'label': "HAP1-Specific essential"},
                                                      {'key': 'K', 'index': 4, 'label': "KBM7-Specific essential"}],
               'evidence_category': category, 'value_type': SELECT,
               'variantgrid_column_id': "essential_gene_gene_trap"}),
    ]
    EvidenceKey.objects.bulk_create(new_ekeys)


def _reverse_new_dbnsfp_gene_ekeys(apps, _schema_editor):
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    NEW_EKEYS = [
        'gnomad_pli', 'gnomad_prec', 'gnomad_pnull',
        'gene_damage_index_score', 'phi', 'ghis', 'prec',
        'hipred_score', 'gene_indispensability_score',
        'essential_gene_crispr', 'essential_gene_crispr2', 'essential_gene_gene_trap',
    ]
    EvidenceKey.objects.filter(pk__in=NEW_EKEYS).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('classification', '0078_classificationimportrun_missing_row_count'),
        ('snpdb', '0081_new_dbnsfp_gene_columns'),
    ]

    operations = [
        migrations.RunPython(_add_new_dbnsfp_gene_ekeys, reverse_code=_reverse_new_dbnsfp_gene_ekeys)
    ]
