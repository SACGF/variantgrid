# Generated by Django 4.0.3 on 2022-06-02 01:41

from django.db import migrations


def _add_new_pathogenicity_prediction_ekeys(apps, _schema_editor):
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    FREE_ENTRY = 'F'
    BOOLEAN = 'B'
    FLOAT = 'L'

    category = 'CP'
    order_near_cadd = 5
    order_near_loftool = 10

    new_ekeys = [
        EvidenceKey(
            **{'key': 'bayesdel', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_near_cadd,
               'label': 'BayesDel', 'sub_label': 'Meta-predictor',
               'description': 'Deleteriousness prediction meta-score',
               'examples': [0.1, 0.89], 'options': [], 'see': "https://doi.org/10.1002/humu.23158",
               'evidence_category': category, 'value_type': FLOAT,
               'copy_consensus': True, 'variantgrid_column_id': "bayesdel_noaf_rankscore"}),

        EvidenceKey(
            **{'key': 'clinpred', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_near_cadd,
               'label': 'ClinPred', 'sub_label': 'Meta-predictor',
               'description': 'A deleteriousness prediction meta-score',
               'examples': [0.1, 0.89], 'options': [], 'see': "https://doi.org/10.1016/j.ajhg.2018.08.005",
               'evidence_category': category, 'value_type': FLOAT,
               'copy_consensus': True, 'variantgrid_column_id': "clinpred_rankscore"}),

        EvidenceKey(
            **{'key': 'vest', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_near_cadd,
               'label': 'VEST', 'description': 'VEST Pathogenicity prediction score',
               'examples': [0.1, 0.89], 'options': [], 'see': "https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3665549/",
               'evidence_category': category, 'value_type': FLOAT,
               'copy_consensus': True, 'variantgrid_column_id': "vest4_rankscore"}),

        # Need to cram 5 fields into here, so will do manually, no single variantgrid_column
        EvidenceKey(
            **{'key': 'aloft', 'mandatory': False, 'max_share_level': 'logged_in_users', 'order': order_near_cadd,
               'label': 'ALoFT', 'description': 'Loss of Function predictor',
               'examples': [42, 12345], 'options': [], 'see': "https://www.nature.com/articles/s41467-017-00443-5",
               'evidence_category': category, 'value_type': FREE_ENTRY,
               'copy_consensus': True, 'variantgrid_column_id': None}),

        EvidenceKey(
            **{'key': 'nmd_escaping_variant', 'mandatory': False, 'max_share_level': 'logged_in_users',
               'order': order_near_loftool, 'label': 'NMD escaping',
               'description': 'Predicts if a stop_gained variant could escape NMD. True if any of the following are met: 1. Variant is in last exon 2. Variant is less than 50 bases upstream of the penultimate (second to the last ) exon. 3. Variant falls in the first 100 coding bases. 4. Transcript has only 1 exon (no introns)',
               'examples': [False, True], 'options': [], 'see': None, 'evidence_category': category,
               'value_type': BOOLEAN,
               'copy_consensus': True, 'variantgrid_column_id': "nmd_escaping_variant"}),
    ]
    EvidenceKey.objects.bulk_create(new_ekeys)

    # Some of these already have previous values - eg cadd_phred for cadd
    ek_vg_columns = {
        "cadd": "cadd_raw_rankscore",
        "revel": "revel_rankscore",
        "metalr": "metalr_rankscore",
    }
    for ek_pk, variantgrid_column_id in ek_vg_columns.items():
        EvidenceKey.objects.filter(pk=ek_pk).update(variantgrid_column_id=variantgrid_column_id)


class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0074_one_off_manual_populate_classification_transcript_versions'),
    ]

    operations = [
        migrations.RunPython(_add_new_pathogenicity_prediction_ekeys)
    ]
