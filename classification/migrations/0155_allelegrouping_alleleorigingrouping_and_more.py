# Generated by Django 4.2.15 on 2024-10-21 05:07

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0151_one_off_fix_csv_export_quoting'),
        ('classification', '0154_alter_importedalleleinfo_status'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlleleGrouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlleleOriginGrouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('allele_origin_bucket', models.CharField(choices=[('G', 'Germline'), ('S', 'Somatic'), ('U', 'Unknown')], default='U', max_length=1)),
                ('overlap_status', models.IntegerField(choices=[(0, 'No Shared Records'), (10, 'Single Shared Submitter'), (20, 'Multiple Submitters'), (30, 'Agreement'), (40, 'Confidence'), (50, 'Discordance'), (60, 'Discordance')], default=0)),
                ('dirty', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ClassificationGrouping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('allele_origin_bucket', models.CharField(choices=[('G', 'Germline'), ('S', 'Somatic'), ('U', 'Unknown')], max_length=1)),
                ('share_level', models.CharField(choices=[('user', 'CURRENT_USER'), ('lab', 'LAB'), ('institution', 'INSTITUTION'), ('logged_in_users', 'ALL_USERS'), ('public', 'PUBLIC')], max_length=16)),
                ('classification_count', models.IntegerField(default=0)),
                ('pathogenic_difference', models.IntegerField(choices=[(0, 'No Differences'), (1, 'Differences'), (2, 'Clinical Significance Difference')], default=0)),
                ('somatic_difference', models.IntegerField(choices=[(0, 'No Differences'), (1, 'Same Tier, different AMP Level'), (2, 'Different Tier')], default=0)),
                ('dirty', models.BooleanField(default=True)),
                ('conditions', models.JSONField(blank=True, null=True)),
                ('zygosity_values', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), blank=True, null=True, size=None)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClassificationGroupingEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
            ],
        ),
        migrations.CreateModel(
            name='ClassificationGroupingSearchTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('term', models.TextField()),
                ('term_type', models.CharField(choices=[('CON_ID', 'Condition ID'), ('SCV', 'Clinvar SCV'), ('GENE_SYMBOL', 'Gene Symbol'), ('DR', 'Discordance Report')], max_length=20)),
                ('extra', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.RemoveField(
            model_name='classificationmodification',
            name='somatic_clinical_significance_sort',
        ),
        migrations.AddField(
            model_name='classification',
            name='summary',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddIndex(
            model_name='classification',
            index=models.Index(fields=['allele_origin_bucket'], name='classificat_allele__5ea017_idx'),
        ),
        migrations.AddIndex(
            model_name='classification',
            index=models.Index(models.F('summary__pathogenicity__sort'), name='summary__p_sort_idx'),
        ),
        migrations.AddIndex(
            model_name='classification',
            index=models.Index(models.F('summary__somatic__sort'), name='summary__s_sort_idx'),
        ),
        migrations.AddIndex(
            model_name='classification',
            index=models.Index(models.F('summary__date__value'), name='summary__d_sort_idx'),
        ),
        migrations.AddField(
            model_name='classificationgroupingsearchterm',
            name='grouping',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.classificationgrouping'),
        ),
        migrations.AddField(
            model_name='classificationgroupingentry',
            name='classification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.classification'),
        ),
        migrations.AddField(
            model_name='classificationgroupingentry',
            name='grouping',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.classificationgrouping'),
        ),
        migrations.AddField(
            model_name='classificationgrouping',
            name='allele_origin_grouping',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.alleleorigingrouping'),
        ),
        migrations.AddField(
            model_name='classificationgrouping',
            name='lab',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab'),
        ),
        migrations.AddField(
            model_name='classificationgrouping',
            name='latest_allele_info',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classification.importedalleleinfo'),
        ),
        migrations.AddField(
            model_name='classificationgrouping',
            name='latest_classification_modification',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='classification.classificationmodification'),
        ),
        migrations.AddField(
            model_name='alleleorigingrouping',
            name='allele_grouping',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.allelegrouping'),
        ),
        migrations.AddField(
            model_name='allelegrouping',
            name='allele',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.allele'),
        ),
        migrations.AddIndex(
            model_name='classificationgroupingsearchterm',
            index=models.Index(fields=['term_type', 'term'], name='classificat_term_ty_e67ad5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classificationgroupingsearchterm',
            unique_together={('grouping', 'term', 'term_type')},
        ),
        migrations.AlterUniqueTogether(
            name='classificationgroupingentry',
            unique_together={('grouping', 'classification')},
        ),
        migrations.AlterUniqueTogether(
            name='alleleorigingrouping',
            unique_together={('allele_grouping', 'allele_origin_bucket')},
        ),
    ]
