# Generated by Django 4.1.5 on 2023-03-09 02:46

from django.db import migrations


def _one_off_update_ekey_description(apps, _schema_editor):
    """ This can be deleted if there is a blat_keys migration after it """
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    # MONDO one - only do if doesn't contain MONDO - or go back and edit blat

    KEY_DESCRIPTION = {
        "assertion_method": "The curation method used to interpret the variant. Novel or in-house curation methods can be added as custom values.",  # use to => "used to"
        "disease_onset": "When did the disease start to affect the patient?",  # when was => when did
        "gerp_pp": "GERP++ (previously referred to as GERP2) score. <p> GERP++ consists of two programs, gerpcol and gerpelem. Gerpcol estimates constraint for each column of the alignment; gerpelem then identifies constrained elements from gerpcol's output.",  # fixes "estimates" typo
        "gnomad_oe_lof": "Observed/expected (oe) score for the gene being 'loss-of-function' intolerant. Low oe values are indicative of strong intolerance. <b>It is important to consider the confidence interval when using oe.</b> Please include the CI in brackets when entering data as per the example above. <p> From gnomAD: A gene with an LoF oe of 0.4 can be interpreted as a gene where only 40% of the expected loss-of-function variants were observed and therefore is likely under selection against LoF variants. In addition, the 90% CI allows us to clearly distinguish cases where there is a lot of uncertainty about the constraint for that gene due to sample size. For interpretation of Mendelian cases, we suggest using the upper bound of the oe confidence interval < 0.35 if a hard threshold is needed.",  # gnomad capitalisation, fixes dots and capitalisation
        "literature": "Publications related to this variant and the interpretation of these findings. To store a link to the publication enter the PubMed ID in the literature summary.",  # PubMed capitalisation
        "regional_missense_constraint": "Is there evidence that the variant occurs in a functionally constrained region? (see gnomAD and Decipher)",  # gnomAD capitalisation
    }

    for key, description in KEY_DESCRIPTION.items():
        EvidenceKey.objects.filter(key=key).update(description=description)

    # Some envornments have customised their condition already - only change if no mention of MONDO
    CONDITION_MONDO_UPDATE = 'A condition with an association to the gene for which the variant was interpreted against.\n\nInput MONDO, OMIM or HPO reference IDs and/or free text.\nThis field is used for Condition Text Matching, where the resolved condition text is viewable on classification listings and in the summary box on the classification form.\n\nFor the recording of phenotypes observed in the patient, see the "Patient phenotype" field.\n\nSee the ClinVar recommendations below for more detail'
    ek_qs = EvidenceKey.objects.filter(key='condition').exclude(description__contains='MONDO')
    ek_qs.update(description=CONDITION_MONDO_UPDATE)


class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0101_one_off_fix_variant_matching_non_coding'),
    ]

    operations = [
        migrations.RunPython(_one_off_update_ekey_description)
    ]
