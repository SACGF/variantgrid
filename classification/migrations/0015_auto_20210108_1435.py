# Generated by Django 3.1 on 2021-01-08 04:05

import django.contrib.postgres.fields
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models

import library.django_utils.guardian_permissions_mixin


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0012_remove_organization_classification_report_template'),
        ('genes', '0009_one_off_fix_unknown_genes'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('classification', '0014_auto_20210107_1631'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinVarExport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('transcript', models.TextField()),
                ('review_date', models.DateTimeField(blank=True, null=True)),
                ('review_status', models.CharField(choices=[('S', 'Submit When Ready'), ('P', 'Pending'), ('R', 'Reject')], default='P', max_length=1)),
                ('dirty_date', models.DateTimeField(blank=True, null=True)),
                ('submit_when_possible', models.BooleanField(default=False)),
                ('withdrawn', models.BooleanField(default=False)),
                ('allele', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='snpdb.allele')),
                ('classification_based_on', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='classification.classificationmodification')),
                ('gene_symbol', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='genes.genesymbol')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, library.django_utils.guardian_permissions_mixin.GuardianPermissionsMixin),
        ),
        migrations.CreateModel(
            name='ClinVarExportSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('evidence', models.JSONField()),
                ('submission_status', models.TextField()),
                ('clinvar_export', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.clinvarexport')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, library.django_utils.guardian_permissions_mixin.GuardianPermissionsMixin),
        ),
        migrations.CreateModel(
            name='ConditionText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('normalized_text', models.TextField()),
                ('requires_approval', models.BooleanField(blank=True, default=False)),
                ('classifications_count', models.IntegerField(default=0)),
                ('classifications_count_outstanding', models.IntegerField(default=0)),
                ('lab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab')),
                ('last_edited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('normalized_text', 'lab')},
            },
            bases=(models.Model, library.django_utils.guardian_permissions_mixin.GuardianPermissionsMixin),
        ),
        migrations.CreateModel(
            name='ConditionTextMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('mode_of_inheritance', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=None, null=True, size=None)),
                ('condition_xrefs', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), default=list, size=None)),
                ('condition_multi_operation', models.CharField(choices=[('X', 'Not decided'), ('U', 'Uncertain'), ('C', 'Co-occurring')], default='X', max_length=1)),
                ('classification', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classification.classification')),
                ('condition_text', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='classification.conditiontext')),
                ('gene_symbol', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='genes.genesymbol')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='classification.conditiontextmatch')),
            ],
            options={
                'unique_together': {('condition_text', 'gene_symbol', 'mode_of_inheritance', 'classification')},
            },
            bases=(models.Model, library.django_utils.guardian_permissions_mixin.GuardianPermissionsMixin),
        )
    ]
