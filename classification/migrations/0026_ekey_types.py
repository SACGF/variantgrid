# Generated by Django 3.1.3 on 2021-04-07 07:16
from django.db import migrations

from manual.operations.manual_operations import ManualOperation


def _ekey_types(apps, _schema_editor):
    """ This can be deleted if there is a blat_keys migration after it """
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    UNIT = 'N'
    INTEGER = 'I'
    FLOAT = 'L'

    KEY_VALUE_TYPE = {
        "allele_frequency": UNIT,
        "read_depth": INTEGER,
        "read_qual_score": INTEGER,
        "allele_depth": INTEGER,
        "reference_depth": INTEGER,
        "genotype_quality": INTEGER,
        "insert_size": INTEGER,
        "median_read_length": FLOAT,
        "segregation_lod": FLOAT,
        "internal_db_het_count": INTEGER,
        "internal_db_hom_count": INTEGER,
        "internal_samples_100_percent_20x_gene_coverage": INTEGER,
        "clinvar_variation_id": INTEGER,
    }

    KEY_DESCRIPTION = {
        "segregation_lod": "LOD stands for 'Logarithm of the odds'. "
                           "Formula is log(10) likelihood if linked / likelihood loci are unlinked",
    }

    for key, value_type in KEY_VALUE_TYPE.items():
        EvidenceKey.objects.filter(key=key).update(value_type=value_type)

    for key, description in KEY_DESCRIPTION.items():
        EvidenceKey.objects.filter(key=key).update(description=description)


def _test_has_legacy_allele_frequency(apps):
    Classification = apps.get_model("classification", "Classification")
    return Classification.objects.filter(evidence__allele_frequency__isnull=False).exists()


class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0025_classification_condition_resolution'),
    ]

    operations = [
        migrations.RunPython(_ekey_types),
        ManualOperation(task_id=ManualOperation.task_id_manage(["fix_legacy_classification_convert_allele_frequency_from_percent_to_unit"]),
                        test=_test_has_legacy_allele_frequency)
    ]
