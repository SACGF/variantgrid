# Generated by Django 4.0.4 on 2022-05-06 05:56
from typing import List

from django.db import migrations


def migrate_source_id(apps, _schema_editor):
    log: List[str] = []
    Classification = apps.get_model("classification", "Classification")
    EvidenceKey = apps.get_model("classification", "EvidenceKey")

    classifications_with_source_id_evidence_qs = Classification.objects.filter(evidence__source_id__value__isnull=False)
    print()
    print(f"{classifications_with_source_id_evidence_qs.count()} records to update")
    for classification in classifications_with_source_id_evidence_qs:
        source_id_val = classification.evidence.get('source_id').get('value')
        if not classification.last_source_id:
            classification.last_source_id = source_id_val
            log.append(f"Classification {classification.pk} updating source ID with evidence {source_id_val}")
        else:
            log.append(f"Classification {classification.pk} already had source ID {classification.last_source_id}, not replacing with evidence {source_id_val}")

        classification.evidence.pop('source_id')
        classification.save(update_fields=['last_source_id', 'evidence'])  # don't want to update modified for this change

        for classification_modification in classification.classificationmodification_set.filter().order_by('-created'):
            update_cm_fields: List[str] = []
            if 'source_id' in classification_modification.delta:
                classification_modification.delta.pop('source_id')
                update_cm_fields.append('delta')
            if classification_modification.published_evidence:
                if 'source_id' in classification_modification.published_evidence:
                    classification_modification.published_evidence.pop('source_id')
                    update_cm_fields.append('published_evidence')
            if update_cm_fields:
                log.append(f"Removing source_id from version {classification_modification.pk}")
                classification_modification.save(update_fields=update_cm_fields)

    EvidenceKey.objects.filter(key='source_id').delete()
    log.append("Removing EvidenceKey source_id")
    with open('source_id_migration.log', 'w') as log_file:
        log_file.writelines([line + '\n' for line in log])
    print("Check source_id_migration.log for details on migration. Delete (or archive) the file to tidy up.")


class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0071_uploadedclassificationsunmapped_effective_modified_and_more'),
    ]

    operations = [
        migrations.RunPython(migrate_source_id)
    ]
