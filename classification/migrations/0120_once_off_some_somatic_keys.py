# Generated by Django 4.2.5 on 2023-11-15 23:53
from typing import Any

from django.db import migrations


def _create_somatic_clinical_significance(apps, schema):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    EvidenceKey.objects.create(
        key="somatic:clinical_significance",
        label="Somatic Clinical Significance",
        value_type="S",
        order=1,
        description= \
"""
Evidence-based variant categorisation. Somatic variants are classified into four tiers based on their level of clinical significance in cancer diagnosis, prognosis, and/or therapeutics.<br/>
Tier I: Variants of Strong Clinical Significance<br/>
Tier II: Variants of Potential Clinical Significance<br/>
Tier III: Variants of Unknown Clinical Significance<br/>
Tier IV: Benign or Likely Benign Variants
""",
        evidence_category="HI",
        copy_consensus=False,
        options=[
              {
                "key": "tier_1",
                "tier": "1",
                "index": 1,
                "label": "Tier I",
                "aliases": [
                  "1"
                ],
              },
            {
                "key": "tier_2",
                "tier": "2",
                "index": 2,
                "label": "Tier II",
                "aliases": [
                    "2"
                ],
            },
            {
                "key": "tier_3",
                "tier": "3",
                "index": 3,
                "label": "Tier III",
                "aliases": [
                    "1"
                ],
            },
            {
                "key": "tier_4",
                "tier": "4",
                "index": 4,
                "label": "Tier IV",
                "aliases": [
                    "4"
                ],
            }
        ]
    )


def _reverse_create_somatic_clinical_significance(apps, schema_editor):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    EvidenceKey.objects.filter(key="somatic:clinical_significance").delete()


def _update_allele_origin(apps, schema_editor):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    allele_origin = EvidenceKey.objects.get(key="allele_origin")
    options: list[dict[str, Any]] = allele_origin.options
    has_horak = False
    for option in options:
        if key := option.get("key"):
            if "somatic" in key.lower():
                option["namespaces"] = ["somatic"]
            elif "germline" in key.lower():
                option["namespaces"] = ["germline"]
    allele_origin.save()


def _un_mandatory_clinical_siginficance(apps, sceham_editor):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    EvidenceKey.objects.filter(key="clinical_significance").update(mandatory=False)


def _re_mandatory_clinical_siginficance(apps, sceham_editor):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    EvidenceKey.objects.filter(key="clinical_significance").update(mandatory=True)


def _reverse_allele_origin(apps, schema_editor):
    EvidenceKey = apps.get_model('classification', 'EvidenceKey')
    allele_origin = EvidenceKey.objects.get(key="allele_origin")
    options: list[dict[str, Any]] = allele_origin.options
    for option in options:
        if "namespaces" in option:
            option.pop("namespaces")
    allele_origin.save()


class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0119_once_off_evidence_keys_acmg_namespace'),
    ]

    operations = [
        migrations.RunPython(_create_somatic_clinical_significance, _reverse_create_somatic_clinical_significance),
        migrations.RunPython(_update_allele_origin, _reverse_allele_origin),
        migrations.RunPython(_un_mandatory_clinical_siginficance, _re_mandatory_clinical_siginficance)
    ]
