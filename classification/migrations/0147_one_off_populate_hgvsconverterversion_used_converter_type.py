# Generated by Django 4.2.10 on 2024-07-05 03:02

from django.db import migrations
from django.db.models import F, Q, Min

from genes.hgvs import HGVSConverterType


def _one_off_populate_hgvsconverterversion_used_converter_type(apps, schema_editor):
    HGVSConverterVersion = apps.get_model('classification', 'HGVSConverterVersion')
    ResolvedVariantInfo = apps.get_model('classification', 'ResolvedVariantInfo')
    ImportedAlleleInfo = apps.get_model('classification', 'ImportedAlleleInfo')

    internal_qs = HGVSConverterVersion.objects.filter(method__startswith='Internally converted')
    internal_qs.update(used_converter_type=F("hgvs_converter_type"))
    clingen_qs = HGVSConverterVersion.objects.filter(method__startswith='ClinGen Allele Registry')
    clingen_qs.update(used_converter_type=HGVSConverterType.CLINGEN_ALLELE_REGISTRY.name)

    for converter_type in HGVSConverterType:
        qs = HGVSConverterVersion.objects.filter(Q(method__startswith=str(converter_type)) | Q(method__startswith=converter_type.name))
        qs.update(used_converter_type=converter_type.name)

    # Legacy ones were 'unknown tool...' - ok to have these as NULL

    # We should probably remove dupes too (not including method)
    unique_fields = ("hgvs_converter_type", "version", "used_converter_type", "code_git_hash")
    newest_hcvs = HGVSConverterVersion.objects.values(*unique_fields).annotate(first_id=Min('id'))
    newest_ids = set(newest_hcvs.values_list("first_id", flat=True))

    # The only object that should have it now is ResolvedVariantInfo
    for hcvs in HGVSConverterVersion.objects.filter(pk__in=newest_ids):
        kwargs = {
            f"c_hgvs_converter_version__{field}": getattr(hcvs, field) for field in unique_fields
        }
        ResolvedVariantInfo.objects.filter(**kwargs).update(c_hgvs_converter_version=hcvs)

    if num := HGVSConverterVersion.objects.exclude(pk__in=newest_ids).delete()[0]:
        print(f"Deleted {num} dupe HGVSConverterVersion objects")

    # Now we need to assign all AlleleInfo to hgvs_converter_version
    if legacy := HGVSConverterVersion.objects.filter(version__startswith='Legacy').first():
        ImportedAlleleInfo.objects.all().update(hgvs_converter_version=legacy)



class Migration(migrations.Migration):

    dependencies = [
        ('classification', '0146_hgvsconverterversion_used_converter_type'),
    ]

    operations = [
        migrations.RunPython(_one_off_populate_hgvsconverterversion_used_converter_type)
    ]
