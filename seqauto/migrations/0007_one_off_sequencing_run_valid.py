# Generated by Django 3.1.3 on 2021-03-04 04:21

from django.db import migrations


def _has_errors(apps, sequencing_run):
    IlluminaFlowcellQC = apps.get_model("seqauto", "IlluminaFlowcellQC")
    SampleSheet = apps.get_model("seqauto", "SampleSheet")
    SampleSheetCombinedVCFFile = apps.get_model("seqauto", "SampleSheetCombinedVCFFile")
    SampleFromSequencingSample = apps.get_model("seqauto", "SampleFromSequencingSample")
    UnalignedReads = apps.get_model("seqauto", "UnalignedReads")

    try:
        illumina_qc = sequencing_run.sequencingruncurrentsamplesheet.sample_sheet.illuminaflowcellqc
        if illumina_qc.data_state != 'C':
            return True
    except:
        return True

    try:
        current_sample_sheet = sequencing_run.sequencingruncurrentsamplesheet.sample_sheet
    except:
        return True

    try:
        combo = current_sample_sheet.samplesheetcombinedvcffile_set.get()
        try:
            combo.backendvcf  # if no exception we can link it
            try:
                combo.sample_sheet.sequencing_run.vcffromsequencingrun
            except:
                return True
        except:
            pass
    except:
        pass

    old_sample_sheets = SampleSheet.objects.filter(sequencing_run=sequencing_run).exclude(pk=current_sample_sheet.pk)
    illuminate_qc = IlluminaFlowcellQC.objects.filter(sample_sheet=current_sample_sheet)
    old_illuminate_qc = IlluminaFlowcellQC.objects.filter(sample_sheet__in=old_sample_sheets)
    old_sample_sheet_combined_vcf = SampleSheetCombinedVCFFile.objects.filter(sample_sheet__in=old_sample_sheets)
    old_sample_links = SampleFromSequencingSample.objects.filter(sequencing_sample__sample_sheet__in=old_sample_sheets)
    old_unaligned_reads = UnalignedReads.objects.filter(sequencing_sample__sample_sheet__in=old_sample_sheets)
    return any([not illuminate_qc.exists() and old_illuminate_qc.exists(),
                old_sample_sheet_combined_vcf.exists(),
                old_unaligned_reads.exists(),
                old_sample_links.exists()])


def _one_off_sequencing_run_valid(apps, _schema_editor):
    SequencingRun = apps.get_model("seqauto", "SequencingRun")

    total_runs = SequencingRun.objects.count()
    valid_runs = []
    # Default = False, so only update the ones that are True
    for sequencing_run in SequencingRun.objects.all():
        has_errors = _has_errors(apps, sequencing_run)
        if not has_errors:
            valid_runs.append(sequencing_run.pk)

    if valid_runs:
        print(f"Set {len(valid_runs)} of {total_runs} to valid")
        SequencingRun.objects.filter(pk__in=valid_runs).update(ready=True)


class Migration(migrations.Migration):

    dependencies = [
        ('seqauto', '0006_sequencingrun_ready'),
    ]

    operations = [
        migrations.RunPython(_one_off_sequencing_run_valid)
    ]
