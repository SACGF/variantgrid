# Generated by Django 3.1 on 2020-11-30 00:51
import pathlib

from django.db import migrations

from library.utils import md5sum_str

# Re-implementation of model methods (can't use them in migrations - and they will be deleted)
def _get_qc_gene_list_for_sample(apps, sample):
    SampleFromSequencingSample = apps.get_model("seqauto", "SampleFromSequencingSample")
    try:
        ss = sample.samplefromsequencingsample.sequencing_sample
        qc = ss.unalignedreads_set.get().bamfile_set.get().qc_set.get()
        return qc.qcgenelist_set.get()
    except SampleFromSequencingSample.DoesNotExist:
        pass
    except Exception as e:
        print(f"sample_id: {sample.pk} exception: {e}")
        return None


def _fix_seqauto_qc_gene_list(apps, schema_editor):
    """ New fields added:
            QCGeneList
                * file_last_modified
                * hash
                * sample_gene_list
    """
    BATCH_SIZE = 1000
    QCGeneList = apps.get_model("seqauto", "QCGeneList")
    QCGeneCoverage = apps.get_model("seqauto", "QCGeneCoverage")
    DATASTATE_COMPLETE = 'C'

    # QCGeneList wasn't automatically reloaded, so what was loaded will have been the 1st one, not the
    # latest one on the disk. Thus we need to check genes - if it's the same we'll set last modified/hash etc
    # Otherwise set it to an earlier time/bad hash, so the new data will get loaded next scan
    num_skipped = 0
    num_set_to_latest = 0
    num_out_of_date = 0
    qc_gene_list_list = []
    for qcgl in QCGeneList.objects.filter(data_state=DATASTATE_COMPLETE):
        path = pathlib.Path(qcgl.path)
        if path.exists():
            with open(qcgl.path) as f:
                try:
                    custom_gene_list_text = f.read()
                    md5_hash = md5sum_str(custom_gene_list_text)
                    file_unchanged = md5_hash == qcgl.custom_text_gene_list.md5_hash
                except UnicodeDecodeError as e:
                    print(f"Skipping QC Gene List: '{qcgl.path}': {e}")
                    num_skipped += 1
                    continue

                if file_unchanged:
                    num_set_to_latest += 1
                    qcgl.file_last_modified = path.stat().st_mtime
                    qc_gene_list_list.append(qcgl)
                else:
                    num_out_of_date += 1
                    # Will be left with default file_last_modified of 0.0
                    # Thus will get updated automatically next time.
        else:
            num_skipped += 1

    if qc_gene_list_list:
        QCGeneList.objects.bulk_update(qc_gene_list_list, ["file_last_modified"], BATCH_SIZE)

    total = num_skipped + num_set_to_latest + num_out_of_date
    print("QCGeneCoverage")
    print(f"total: {total} skipped: {num_skipped} ({100 * num_skipped / total})")
    print(f"Set to latest: {num_set_to_latest} ({100 * num_set_to_latest / total})")
    print(f"Out of date: {num_out_of_date} ({100 * num_out_of_date / total})")

    qc_gene_coverage_list = []
    for qcgc in QCGeneCoverage.objects.filter(data_state=DATASTATE_COMPLETE):
        path = pathlib.Path(qcgc.path)
        if path.exists():
            qcgc.file_last_modified = path.stat().st_mtime
            qc_gene_coverage_list.append(qcgc)

    if qc_gene_coverage_list:
        QCGeneCoverage.objects.bulk_update(qc_gene_coverage_list, ["file_last_modified"], BATCH_SIZE)


def _create_sample_gene_lists(apps, schema_editor):
    """ Creates SampleGeneList for all existing QC GeneLists """
    Sample = apps.get_model("snpdb", "Sample")
    SampleGeneList = apps.get_model("genes", "SampleGeneList")
    ActiveSampleGeneList = apps.get_model("genes", "ActiveSampleGeneList")

    # Make SampleGeneList for each QCGeneList reachable by a sample
    for sample in Sample.objects.filter(samplefromsequencingsample__sequencing_sample__unalignedreads__bamfile__qc__qcgenelist__isnull=False).distinct():
        if qc_gene_list := _get_qc_gene_list_for_sample(apps, sample):
            gene_list = qc_gene_list.custom_text_gene_list.gene_list
            sample_gene_list = SampleGeneList.objects.create(sample=sample, gene_list=gene_list)
            # As there's only one, set it to be the active one
            ActiveSampleGeneList.objects.create(sample=sample, sample_gene_list=sample_gene_list)
            qc_gene_list.sample_gene_list = sample_gene_list
            qc_gene_list.save()

    print(f"Created {SampleGeneList.objects.count()} SampleGeneLists")


def _fix_analysis(apps, schema_editor):
    """ Switch AnalysisNodes from using QCGeneList via Sample to SampleGeneList """
    SampleNode = apps.get_model("analysis", "SampleNode")
    GeneListNode = apps.get_model("analysis", "GeneListNode")

    # SampleNode - GOI
    for sn in SampleNode.objects.filter(sample__isnull=False, restrict_to_qc_gene_list=True):
        if qc_gene_list := _get_qc_gene_list_for_sample(apps, sn.sample):
            if qc_gene_list.sample_gene_list:
                sn.sample_gene_list = qc_gene_list.sample_gene_list
                sn.save()

    # GeneListNode
    for gl_node in GeneListNode.objects.filter(sample__isnull=False):
        if qc_gene_list := _get_qc_gene_list_for_sample(apps, gl_node.sample):
            if qc_gene_list.sample_gene_list:
                gl_node.sample_gene_list = qc_gene_list.sample_gene_list
                gl_node.save()


def _one_off_fix_legacy_create_sample_gene_lists(apps, schema_editor):
    QCGeneList = apps.get_model("seqauto", "QCGeneList")
    num_qc_gene_lists = QCGeneList.objects.count()
    print(f"Num QCGeneList: {num_qc_gene_lists}")

    if QCGeneList.objects.exists():
        _fix_seqauto_qc_gene_list(apps, schema_editor)
        _create_sample_gene_lists(apps, schema_editor)
        _fix_analysis(apps, schema_editor)

        num_qc_gene_lists_no_sample_gene_list = QCGeneList.objects.filter(sample_gene_list__isnull=True).count()
        print(f"Num QCGeneList with no sample_gene_list: {num_qc_gene_lists_no_sample_gene_list}")


class Migration(migrations.Migration):

    dependencies = [
        ('analysis', '0010_auto_20201201_1152'),
        ('genes', '0007_activesamplegenelist_samplegenelist'),
        ('manual', '0002_deployment'),
        ('seqauto', '0003_auto_20201204_1153'),
    ]

    operations = [
        migrations.RunPython(_one_off_fix_legacy_create_sample_gene_lists)
    ]
