# Generated by Django 3.1.3 on 2021-03-24 03:04
import pandas as pd
from collections import defaultdict

from django.db import migrations
from django.db.models import Q
from django.utils import timezone


def _one_off_copy_to_models_v2(apps, schema_editor):
    OLD_CLASSES_AND_FKS = {
        "SequencingRun": ["sequencing_run_id"],
        "SampleSheet": ["sample_sheet_id"],
        "SequencingRunCurrentSampleSheet": [],  # No FK to this
        "SequencingSample": "sequencing_sample_id",
        "SequencingSampleData": [],  # No FK to this
        "SampleFromSequencingSample": [], # No FK to this
        "VCFFromSequencingRun": [],  # No FK to this
        "IlluminaFlowcellQC": ["illumina_flowcell_qc_id"],
        "ReadQ30": [],  # No FK to this
        "IlluminaIndexQC": [],  # No FK to this
        "Fastq": ["fastq_id", "fastq_r1_id", "fastq_r2_id"],
        "FastQC": [],  # No FK to this
        "UnalignedReads": ["unaligned_reads_id"],
        "BamFile": ["bam_file_id"],
        "Flagstats": [],  # No FK to this
        "VCFFile": ["vcf_file_id"],
        "SampleSheetCombinedVCFFile": ["combo_vcf_id"],  # For BackEndVCF
        "QC": ["qc_id"],
        "QCGeneList": [], # No FK to this
        "QCExecSummary": ["exec_summary_id"],
        "ExecSummaryReferenceRange": [],  # No FK to this
    }

    # path
    # file_last_modified = models.FloatField(default=0.0)
    # data_state = models.CharField(max_length=1, choices=DataState.choices)

    old_new_pk = defaultdict(dict)

    for old_class_name, fk_name_list in OLD_CLASSES_AND_FKS.items():
        new_class_name = old_class_name + "2"
        old_klass = apps.get_model("seqauto", old_class_name)
        new_klass = apps.get_model("seqauto", new_class_name)

        num_records = 0
        first_record = True
        for data in old_klass.objects.all().values():
            if first_record:
                print(f"Old: {old_klass}")
                print(data)

            if "error_exception" in data:  # This was in SeqAutoFile but not SeqAutoRecord
                del data["error_exception"]
            if new_class_name == "SampleSheet2":
                del data["date"]  # use file modification date in SeqAutoRecord

            # Auto now fields rely on code so won't get executed in migrations - need to use defaults
            for date_field in ["created", "modified"]:
                if date_field not in data and hasattr(new_klass, date_field):
                    data[date_field] = timezone.now()

            # Model inheritance uses ID to refer to base class - while PK is for
            if old_class_name == "SequencingRun":
                old_pk = data["name"]
            else:
                old_pk = data["id"]
                del data["id"]

            for fk in old_new_pk:
                if old_fk := data.get(fk):
                    data[fk] = old_new_pk[fk][old_fk]

            r = new_klass.objects.create(**data)
            if first_record:
                print(f"New: {new_klass} - inserted with ID={r.id}")
                print(data)
                print("-" * 40 + "\n")
                first_record = False
            num_records += 1
            for fk in fk_name_list:
                old_new_pk[fk][old_pk] = r.id

        print(f"Created {num_records} {new_class_name} records.")

    # Verify that nothing went wrong
    SampleSheet2 = apps.get_model("seqauto", "SampleSheet2")
    if SampleSheet2.objects.filter(path='').exists():
        raise ValueError("SampleSheet2 contains path=''")

    # upload.BackEndVCF refers to VCFFile and SampleSheetCombinedVCFFile.
    # Write out what the new FKs should be, then set to NULL (they will be changed to v2 in a bit)
    BackEndVCF = apps.get_model("upload", "BackEndVCF")
    csv_records = []
    for bevcf in BackEndVCF.objects.filter(Q(combo_vcf__isnull=False) | Q(vcf_file__isnull=False)):
        record = {"id": bevcf.id}
        if bevcf.vcf_file:
            record["vcf_file_id"] = old_new_pk["vcf_file_id"][bevcf.vcf_file_id]
        if bevcf.combo_vcf:
            record["combo_vcf_id"] = old_new_pk["combo_vcf_id"][bevcf.combo_vcf_id]
        csv_records.append(record)

    df = pd.DataFrame.from_records(csv_records)
    backend_vcf_filename = "data/migrations/backend_vcf_new_pks.csv"
    df.to_csv(backend_vcf_filename)

    # Set to Null - we'll reload them from CSV above
    BackEndVCF.objects.all().update(vcf_file=None, combo_vcf=None)


class Migration(migrations.Migration):

    dependencies = [
        ('seqauto', '0008_auto_20210324_1333'),
    ]

    operations = [
        migrations.RunPython(_one_off_copy_to_models_v2)
    ]
