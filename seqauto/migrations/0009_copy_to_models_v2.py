# Generated by Django 3.1.3 on 2021-03-24 03:04

from django.db import migrations
from django.utils import timezone


def _one_off_copy_to_models_v2(apps, schema_editor):
    OLD_CLASSES = [
        "SequencingRun",
        "SampleSheet",
        "SequencingRunCurrentSampleSheet",
        "SequencingSample",
        "SequencingSampleData",
        "SampleFromSequencingSample",
        "VCFFromSequencingRun",
        "IlluminaFlowcellQC",
        "ReadQ30",
        "IlluminaIndexQC",
        "Fastq",
        "FastQC",
        "UnalignedReads",
        "BamFile",
        "Flagstats",
        "VCFFile",
        "SampleSheetCombinedVCFFile",
        "QC",
        "QCGeneList",
        "QCExecSummary",
        "ExecSummaryReferenceRange",
    ]

    # path
    # file_last_modified = models.FloatField(default=0.0)
    # data_state = models.CharField(max_length=1, choices=DataState.choices)

    # Go through and create objects with the same PK - that way everything should continue to link up
    for old_class_name in OLD_CLASSES:
        new_class_name = old_class_name + "2"
        old_klass = apps.get_model("seqauto", old_class_name)
        new_klass = apps.get_model("seqauto", new_class_name)

        num_records = 0
        for data in old_klass.objects.all().values():
            if "error_exception" in data:  # This was in SeqAutoFile but not SeqAutoRecord
                del data["error_exception"]
            if new_class_name == "SampleSheet2":
                del data["date"]  # use file modification date in SeqAutoRecord

            # Auto now fields rely on code so won't get executed in migrations - need to use defaults
            for date_field in ["created", "modified"]:
                if date_field not in data and hasattr(new_klass, date_field):
                    data[date_field] = timezone.now()

            # Model inheritance uses ID to refer to base class - while PK is for
            if pk := data.get("id"):
                data["pk"] = pk
                del data["id"]

            new_klass.objects.create(**data)
            num_records += 1

        print(f"Created {num_records} {new_class_name} records.")


# TODO: Set all existing SequencingRun to

class Migration(migrations.Migration):

    dependencies = [
        ('seqauto', '0008_auto_20210324_1333'),
    ]

    operations = [
        migrations.RunPython(_one_off_copy_to_models_v2)
    ]
