# Generated by Django 3.1 on 2020-09-29 05:34

import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import django_dag.models
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        ('genes', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('snpdb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Aligner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BamFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('name', models.TextField()),
                ('aligner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.aligner')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='EnrichmentKit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.IntegerField(default=1)),
                ('enrichment_kit_type', models.CharField(choices=[('A', 'Amplicon'), ('C', 'Capture'), ('V', 'Virtual')], max_length=1, null=True)),
                ('bed_file', models.TextField(blank=True, null=True)),
                ('obsolete', models.BooleanField(default=False)),
                ('canonical_transcript_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='genes.canonicaltranscriptcollection')),
                ('gene_list', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='genes.genelist')),
                ('genomic_intervals', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.genomicintervalscollection')),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fastq',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('name', models.TextField()),
                ('read', models.CharField(choices=[('R1', 'R1'), ('R2', 'R2')], max_length=2)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='FastQC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('total_sequences', models.IntegerField(null=True)),
                ('filtered_sequences', models.IntegerField(null=True)),
                ('gc', models.IntegerField(null=True)),
                ('fastq', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.fastq')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='Flagstats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('total', models.IntegerField(null=True)),
                ('read1', models.IntegerField(null=True)),
                ('read2', models.IntegerField(null=True)),
                ('mapped', models.IntegerField(null=True)),
                ('properly_paired', models.IntegerField(null=True)),
                ('bam_file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.bamfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IlluminaFlowcellQC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('mean_cluster_density', models.IntegerField(null=True)),
                ('mean_pf_cluster_density', models.IntegerField(null=True)),
                ('total_clusters', models.IntegerField(null=True)),
                ('total_pf_clusters', models.IntegerField(null=True)),
                ('percentage_of_clusters_pf', models.FloatField(null=True)),
                ('aligned_to_phix', models.FloatField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='QC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('bam_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.bamfile')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='QCType',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('qc_object_path', models.TextField()),
                ('total_field', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hash', models.TextField()),
                ('path', models.TextField()),
                ('date', models.DateField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SeqAutoRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.CharField(choices=[('c', 'Created'), ('s', 'Scanning Files'), ('m', 'Create Models'), ('F', 'Finished'), ('E', 'Error')], default='c', max_length=1)),
                ('task_id', models.CharField(max_length=36, null=True)),
                ('scan_start', models.DateTimeField(null=True)),
                ('create_models_start', models.DateTimeField(null=True)),
                ('scripts_and_jobs_start', models.DateTimeField(null=True)),
                ('job_launch_script_filename', models.TextField(null=True)),
                ('finish_date', models.DateTimeField(null=True)),
                ('error_exception', models.TextField(null=True)),
                ('fake_data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='patients.fakedata')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeqAutoRunEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.CharField(choices=[('D', 'DEBUG'), ('I', 'INFO'), ('W', 'WARNING'), ('E', 'ERROR')], max_length=1)),
                ('file_type', models.CharField(choices=[('S', 'SampleSheet'), ('I', 'Illumina_Flowcell_QC'), ('U', 'FastQ'), ('F', 'FastQC'), ('B', 'Bam'), ('T', 'Flagstats'), ('V', 'VCF'), ('C', 'CombinedVCF'), ('Q', 'QC'), ('M', 'Data Migration')], max_length=1, null=True)),
                ('message', models.TextField(null=True)),
                ('seqauto_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.seqautorun')),
            ],
        ),
        migrations.CreateModel(
            name='Sequencer',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='SequencingRun',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('path', models.TextField()),
                ('gold_standard', models.BooleanField(default=False)),
                ('bad', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('has_basecalls', models.BooleanField(default=False)),
                ('has_interop', models.BooleanField(default=False)),
                ('enrichment_kit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.enrichmentkit')),
                ('experiment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='seqauto.experiment')),
                ('fake_data', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='patients.fakedata')),
                ('sequencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencer')),
            ],
        ),
        migrations.CreateModel(
            name='SequencingSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_id', models.TextField()),
                ('sample_name', models.TextField(null=True)),
                ('sample_project', models.TextField(null=True)),
                ('sample_number', models.IntegerField()),
                ('lane', models.IntegerField(null=True)),
                ('barcode', models.TextField()),
                ('is_control', models.BooleanField(default=False)),
                ('failed', models.BooleanField(default=False)),
                ('automatically_process', models.BooleanField(default=True)),
                ('enrichment_kit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.enrichmentkit')),
                ('sample_sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheet')),
            ],
        ),
        migrations.CreateModel(
            name='SoftwarePipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoftwarePipelineEdge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariantCaller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('run_params', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VCFFromSequencingRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequencing_run', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingrun')),
                ('vcf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf')),
            ],
        ),
        migrations.CreateModel(
            name='VCFFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('bam_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.bamfile')),
                ('variant_caller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.variantcaller')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='VariantCallingPipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('other_details', models.TextField(blank=True, null=True)),
                ('aligner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.aligner')),
                ('variant_caller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.variantcaller')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnalignedReads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fastq_r1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fastq_r1', to='seqauto.fastq')),
                ('fastq_r2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fastq_r2', to='seqauto.fastq')),
                ('sequencing_sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingsample')),
            ],
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='SoftwarePipelineNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('parameters', models.TextField()),
                ('description', models.TextField()),
                ('children', models.ManyToManyField(blank=True, related_name='_parents', through='seqauto.SoftwarePipelineEdge', to='seqauto.SoftwarePipelineNode')),
                ('softwarepipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.softwarepipeline')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, django_dag.models.NodeBase),
        ),
        migrations.AddField(
            model_name='softwarepipelineedge',
            name='child',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softwarepipelinenode_parent', to='seqauto.softwarepipelinenode'),
        ),
        migrations.AddField(
            model_name='softwarepipelineedge',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softwarepipelinenode_child', to='seqauto.softwarepipelinenode'),
        ),
        migrations.CreateModel(
            name='SequencingSampleData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column', models.TextField()),
                ('value', models.TextField(null=True)),
                ('sequencing_sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingsample')),
            ],
        ),
        migrations.CreateModel(
            name='SequencingRunWiki',
            fields=[
                ('wiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.wiki')),
                ('sequencing_run', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingrun')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('snpdb.wiki',),
        ),
        migrations.CreateModel(
            name='SequencingRunModification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('message', models.TextField(null=True)),
                ('seqauto_run_event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.seqautorunevent')),
                ('sequencing_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingrun')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SequencingRunCurrentSampleSheet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_sheet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheet')),
                ('sequencing_run', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingrun')),
            ],
        ),
        migrations.CreateModel(
            name='SequencingInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doi', models.TextField(blank=True, null=True)),
                ('paper_name', models.TextField(blank=True, null=True)),
                ('year_published', models.IntegerField(null=True)),
                ('seq_details', models.TextField(blank=True, null=True)),
                ('file_type', models.TextField(blank=True, null=True)),
                ('file_count', models.IntegerField(blank=True, default=0)),
                ('enrichment_kit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.enrichmentkit')),
                ('lab_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.labproject')),
                ('sequencer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencer')),
            ],
        ),
        migrations.CreateModel(
            name='SequencerModel',
            fields=[
                ('model', models.TextField(primary_key=True, serialize=False)),
                ('data_naming_convention', models.CharField(choices=[('H', 'HiSeq'), ('M', 'MiSeq')], max_length=1)),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.manufacturer')),
            ],
        ),
        migrations.AddField(
            model_name='sequencer',
            name='sequencer_model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencermodel'),
        ),
        migrations.CreateModel(
            name='SampleSheetCombinedVCFFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('sample_sheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheet')),
                ('variant_caller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.variantcaller')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.AddField(
            model_name='samplesheet',
            name='sequencing_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingrun'),
        ),
        migrations.CreateModel(
            name='SampleFromSequencingSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
                ('sequencing_sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingsample')),
            ],
        ),
        migrations.CreateModel(
            name='ReadQ30',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequencer_read_id', models.IntegerField()),
                ('read', models.CharField(choices=[('R1', 'R1'), ('R2', 'R2'), ('I1', 'I1'), ('I2', 'I2')], max_length=2)),
                ('percent', models.FloatField()),
                ('is_index', models.BooleanField(default=False)),
                ('illumina_flowcell_qc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.illuminaflowcellqc')),
            ],
        ),
        migrations.CreateModel(
            name='QCGeneList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('custom_text_gene_list', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='genes.customtextgenelist')),
                ('qc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.qc')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='QCGeneCoverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('gene_coverage_collection', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='genes.genecoveragecollection')),
                ('qc', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.qc')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QCExecSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('data_state', models.CharField(choices=[('N', 'Non Existent'), ('D', 'Deleted'), ('R', 'Running'), ('S', 'Skipped'), ('E', 'Error'), ('C', 'Complete')], max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('percent_20x_kit', models.FloatField(null=True)),
                ('percent_500x', models.FloatField(null=True)),
                ('percent_250x', models.FloatField(null=True)),
                ('percent_20x', models.FloatField(null=True)),
                ('percent_10x', models.FloatField(null=True)),
                ('mean_coverage_across_genes', models.FloatField()),
                ('mean_coverage_across_kit', models.FloatField()),
                ('uniformity_of_coverage', models.FloatField()),
                ('percent_read_enrichment', models.FloatField()),
                ('duplicated_alignable_reads', models.FloatField()),
                ('median_insert', models.FloatField()),
                ('ts_to_tv_ratio', models.FloatField()),
                ('number_snps', models.IntegerField()),
                ('snp_dbsnp_percent', models.FloatField()),
                ('number_indels', models.IntegerField()),
                ('indels_dbsnp_percent', models.FloatField()),
                ('gene_list', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='genes.genelist')),
                ('qc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.qc')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, ),
        ),
        migrations.CreateModel(
            name='QCColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('field', models.TextField()),
                ('qc_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.qctype')),
            ],
        ),
        migrations.AddField(
            model_name='qc',
            name='vcf_file',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.vcffile'),
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.manufacturer')),
            ],
        ),
        migrations.CreateModel(
            name='JobScript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.TextField()),
                ('out_file', models.TextField(null=True)),
                ('file_type', models.CharField(choices=[('S', 'SampleSheet'), ('I', 'Illumina_Flowcell_QC'), ('U', 'FastQ'), ('F', 'FastQC'), ('B', 'Bam'), ('T', 'Flagstats'), ('V', 'VCF'), ('C', 'CombinedVCF'), ('Q', 'QC'), ('M', 'Data Migration')], max_length=1)),
                ('job_id', models.TextField(null=True)),
                ('job_status', models.CharField(choices=[('C', 'Created'), ('S', 'Submitted'), ('F', 'Finished')], default='C', max_length=1)),
                ('return_code', models.IntegerField(null=True)),
                ('bam_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.bamfile')),
                ('combined_vcf_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheetcombinedvcffile')),
                ('fastqc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.fastqc')),
                ('flagstats', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.flagstats')),
                ('illumina_flowcell_qc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.illuminaflowcellqc')),
                ('qc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.qc')),
                ('sample_sheet', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheet')),
                ('seqauto_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.seqautorun')),
                ('vcf_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.vcffile')),
            ],
        ),
        migrations.CreateModel(
            name='IlluminaIndexQC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.TextField()),
                ('project', models.TextField()),
                ('name', models.TextField()),
                ('reads', models.IntegerField()),
                ('illumina_flowcell_qc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.illuminaflowcellqc')),
            ],
        ),
        migrations.AddField(
            model_name='illuminaflowcellqc',
            name='sample_sheet',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.samplesheet'),
        ),
        migrations.CreateModel(
            name='GoldReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('error_exception', models.TextField(null=True)),
                ('enrichment_kit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.enrichmentkit')),
            ],
        ),
        migrations.CreateModel(
            name='GoldGeneCoverageCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_coverage_collection', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='genes.genecoveragecollection')),
                ('gold_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.goldreference')),
            ],
        ),
        migrations.CreateModel(
            name='GoldCoverageSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_gene_symbol', models.TextField()),
                ('original_transcript_id', models.TextField()),
                ('mean', models.FloatField()),
                ('standard_error', models.FloatField()),
                ('min_mean', models.FloatField()),
                ('depth_20x_5th_percentile', models.FloatField()),
                ('depth_10x_5th_percentile', models.FloatField()),
                ('depth_mean_5th_percentile', models.FloatField()),
                ('depth_mean_95th_percentile', models.FloatField()),
                ('gene_symbol', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='genes.genesymbol')),
                ('gold_reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.goldreference')),
                ('transcript', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='genes.transcript')),
            ],
        ),
        migrations.AddField(
            model_name='fastq',
            name='sequencing_sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencingsample'),
        ),
        migrations.CreateModel(
            name='ExecSummaryReferenceRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percent_20x', django.contrib.postgres.fields.ranges.DecimalRangeField(null=True)),
                ('percent_10x', django.contrib.postgres.fields.ranges.DecimalRangeField(null=True)),
                ('mean_coverage_across_genes', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('mean_coverage_across_kit', django.contrib.postgres.fields.ranges.DecimalRangeField(null=True)),
                ('min_mean_coverage_across_kit', models.IntegerField(null=True)),
                ('min_percent_20x_kit', models.IntegerField(null=True)),
                ('uniformity_of_coverage', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('percent_read_enrichment', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('duplicated_alignable_reads', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('median_insert', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('ts_to_tv_ratio', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('number_snps', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('snp_dbsnp_percent', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('number_indels', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('indels_dbsnp_percent', django.contrib.postgres.fields.ranges.DecimalRangeField()),
                ('exec_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='seqauto.qcexecsummary')),
            ],
        ),
        migrations.AddField(
            model_name='bamfile',
            name='unaligned_reads',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='seqauto.unalignedreads'),
        ),
        migrations.CreateModel(
            name='Assay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrichment_kit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.enrichmentkit')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.library')),
                ('sequencer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='seqauto.sequencer')),
            ],
        ),
    ]
