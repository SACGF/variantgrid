# Generated by Django 4.2.15 on 2025-06-02 06:15

from django.db import migrations
from django.db.models.query_utils import Q


def _one_off_fix_patient_imports_and_modifications(apps, _schema_editor):
    Patient = apps.get_model("patients", "Patient")
    PatientRecord = apps.get_model("patients", "PatientRecord")
    valid_qs = PatientRecord.objects.filter(Q(validation_message__isnull=True) | Q(validation_message=''))
    valid_qs.update(valid=True)

    # I used to just add modifications even as they didn't do anything, leading to dupes, eg:
    # Updated patient as deceased = False
    # Set family_code to 43335
    # Updated patient as deceased = False
    # Set family_code to 43335

    mod_strings = ["Updated patient as deceased = ",
                   "Set affected to",
                   "Set family_code to ",
                   "Set during patient records import"]  # No values on this one so will always match
    for patient in Patient.objects.filter(patientmodification__isnull=False).distinct():
        last_patient_mod = {}
        for pm in patient.patientmodification_set.all().order_by("pk"):
            for ms in mod_strings:
                if pm.description and pm.description.startswith(ms):
                    value = pm.description[len(ms):]
                    print(f"{pm.description=}")
                    last_set_value = last_patient_mod.get(ms)
                    if last_set_value is not None:
                        if last_set_value == value:
                            print(f"--> Deleting: {patient} record={pm.pk}, {pm.description}/{pm.date} as redundant")
                            pm.delete()
                    last_patient_mod[ms] = value


class Migration(migrations.Migration):

    dependencies = [
        ("patients", "0003_one_off_rematch_patient_phenotypes"),
    ]

    operations = [
        migrations.RunPython(_one_off_fix_patient_imports_and_modifications),

    ]
