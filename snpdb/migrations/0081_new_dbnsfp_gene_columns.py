# Generated by Django 4.0.6 on 2022-08-09 07:12

from django.db import migrations
from django.db.models import Max

from library.django_utils import bulk_insert_class_data

# 'loftool' already existed, we just changed path
_NEW_COLUMNS = ['pathway_biocarta_full', 'pathway_consensus_pathdb', 'pathway_kegg_id', 'pathway_kegg_full',
                'gwas_trait_association', 'go_biological_process', 'go_cellular_component', 'go_molecular_function',
                'interactions_biogrid', 'interactions_consensus_pathdb', 'gnomad_pli', 'gnomad_prec', 'gnomad_pnull',
                'essential_gene_crispr', 'essential_gene_crispr2', 'essential_gene_gene_trap']


def _new_dbnsfp_gene_columns(apps, schema_editor):
    VARIANT_GRID_COLUMN = [
        {'grid_column_name': 'pathway_biocarta_full',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__pathway_biocarta_full',
         'annotation_level': 'G',
         'width': None,
         'label': 'BioCarta Pathway',
         'description': 'Full name(s) of the Pathway(s) the gene belongs to (from BioCarta)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'pathway_consensus_pathdb',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__pathway_consensus_pathdb',
         'annotation_level': 'G',
         'width': None,
         'label': 'ConsensusPathDB Pathway',
         'description': 'Pathway(s) the gene belongs to (from ConsensusPathDB)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'pathway_kegg_id',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__pathway_kegg_id',
         'annotation_level': 'G',
         'width': None,
         'label': 'KEGG IDs',
         'description': 'ID(s) of the Pathway(s) the gene belongs to (from KEGG)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'pathway_kegg_full',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__pathway_kegg_full',
         'annotation_level': 'G',
         'width': None,
         'label': 'KEGG Pathway',
         'description': 'Full name(s) of the Pathway(s) the gene belongs to (from KEGG)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'gwas_trait_association',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__gwas_trait_association',
         'annotation_level': 'G',
         'width': None,
         'label': 'GWAS traits',
         'description': 'Trait(s) the gene associated with (from GWAS catalog)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'go_biological_process',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__go_biological_process',
         'annotation_level': 'G',
         'width': None,
         'label': 'GO process',
         'description': 'GO terms for biological process',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'go_cellular_component',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__go_cellular_component',
         'annotation_level': 'G',
         'width': None,
         'label': 'GO cellular',
         'description': 'GO terms for cellular component',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'go_molecular_function',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__go_molecular_function',
         'annotation_level': 'G',
         'width': None,
         'label': 'GO mol function',
         'description': 'GO terms for molecular function',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'interactions_biogrid',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__interactions_biogrid',
         'annotation_level': 'G',
         'width': None,
         'label': 'BioGRID interactions',
         'description': 'The number of other genes this gene interacting with (from BioGRID)',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'interactions_consensus_pathdb',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__interactions_consensus_pathdb',
         'annotation_level': 'G',
         'width': None,
         'label': 'ConsensusPathDB interactions',
         'description': 'The number of other genes this gene interacting with (from ConsensusPathDB).',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'gnomad_pli',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__gnomad_pli',
         'annotation_level': 'G',
         'width': None,
         'label': 'gnomAD prob LOF intolerant',
         'description': '"The probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants)" based on gnomAD 2.1 data',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'gnomad_prec',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__gnomad_prec',
         'annotation_level': 'G',
         'width': None,
         'label': 'gnomAD prob LOF HOM',
         'description': '"the probability of being intolerant of homozygous, but not heterozygous lof variants" based on gnomAD 2.1 data',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'gnomad_pnull',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__gnomad_pnull',
         'annotation_level': 'G',
         'width': None,
         'label': 'gnomAD prob LOF tolerant',
         'description': '"the probability of being tolerant of both heterozygous and homozygous lof variants" based on gnomAD 2.1 data',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'essential_gene_crispr',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__essential_gene_crispr',
         'annotation_level': 'G',
         'width': None,
         'label': 'Essential Gene (CRISPR)',
         'description': 'Essential ("E") or Non-essential phenotype-changing ("N") based on large scale CRISPR experiments. from doi: 10.1126/science.aac7041',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'essential_gene_crispr2',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__essential_gene_crispr2',
         'annotation_level': 'G',
         'width': None,
         'label': 'Essential Gene (CRISPR2)',
         'description': 'Essential ("E"), context-Specific essential ("S"), or Non-essential phenotype-changing ("N") based on large scale CRISPR experiments. from http://dx.doi.org/10.1016/j.cell.2015.11.015',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'essential_gene_gene_trap',
         'variant_column': 'variantannotation__gene__geneannotation__dbnsfp_gene__essential_gene_gene_trap',
         'annotation_level': 'G',
         'width': None,
         'label': 'Essential Gene (Gene Trap)',
         'description': 'Essential ("E"), HAP1-Specific essential ("H"), KBM7-Specific essential ("K"), or Non-essential phenotype-changing ("N"), based on large scale mutagenesis experiments. from doi: 10.1126/science.aac7557',
         'model_field': True,
         'queryset_field': True}
    ]
    bulk_insert_class_data(apps, "snpdb", [("VariantGridColumn", VARIANT_GRID_COLUMN)])

    VariantGridColumn = apps.get_model("snpdb", "VariantGridColumn")
    # LofTool already exists - but is on variant annotation
    loftool_qs = VariantGridColumn.objects.filter(grid_column_name='loftool')
    loftool_qs.update(variant_column='variantannotation__gene__geneannotation__dbnsfp_gene__loftool',
                      annotation_level='G')


def _reverse_new_dbnsfp_gene_columns(apps, schema_editor):
    VariantGridColumn = apps.get_model("snpdb", "VariantGridColumn")

    VariantGridColumn.objects.filter(grid_column_name__in=_NEW_COLUMNS).delete()


def _custom_columns_for_new_dbnsfp_gene_columns(apps, schema_editor):
    CustomColumnsCollection = apps.get_model("snpdb", "CustomColumnsCollection")
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    all_columns = CustomColumnsCollection.objects.get(name='All columns')
    data = all_columns.customcolumn_set.aggregate(Max("sort_order"))
    sort_order_max = data["sort_order__max"] or 0
    custom_columns = []
    for i, column_name in enumerate(_NEW_COLUMNS):
        custom_columns.append(CustomColumn(custom_columns_collection=all_columns,
                                           sort_order=sort_order_max + i,
                                           column_id=column_name))
    if custom_columns:
        CustomColumn.objects.bulk_create(custom_columns)


def _reverse_custom_columns_for_new_dbnsfp_gene_columns(apps, schema_editor):
    CustomColumn = apps.get_model("snpdb", "CustomColumn")
    CustomColumn.objects.filter(column__grid_column_name__in=_NEW_COLUMNS).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('snpdb', '0080_clinvarkey_last_full_run'),
    ]

    operations = [
        migrations.RunPython(_new_dbnsfp_gene_columns, reverse_code=_reverse_new_dbnsfp_gene_columns),
        migrations.RunPython(_custom_columns_for_new_dbnsfp_gene_columns,
                             reverse_code=_reverse_custom_columns_for_new_dbnsfp_gene_columns),
    ]
