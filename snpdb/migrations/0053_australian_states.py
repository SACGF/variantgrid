# Generated by Django 3.2.6 on 2021-11-22 03:13

from django.db import migrations
from django.db.models import Q


def _create_australian_states(apps, schema_editor):
    Country = apps.get_model("snpdb", "Country")
    State = apps.get_model("snpdb", "State")

    # Data taken on 22 Nove 2021 from:
    # https://www.abs.gov.au/statistics/people/population/national-state-and-territory-population/latest-release#states-and-territories
    australia, _ = Country.objects.get_or_create(name='Australia', short_name='Aus', population=25_704_300)

    AU_STATES = [
        ("New South Wales",                 "NSW",  8_176_400),
        ("Victoria",                        "Vic",  6_648_600),
        ("Queensland",                      "Qld",  5_206_400),
        ("South Australia",                 "SA",   1_771_700),
        ("Western Australia",               "WA",   2_675_800),
        ("Tasmania",                        "Tas",  542_000),
        ("Northern Territory",              "NT",   247_000),
        ("Australian Capital Territory",    "ACT",  431_800),
    ]

    for name, short_name, population in AU_STATES:
        State.objects.get_or_create(name=name, short_name=short_name, population=population, country=australia)


def _one_off_assign_labs_to_states(apps, schema_editor):
    Lab = apps.get_model("snpdb", "Lab")
    State = apps.get_model("snpdb", "State")
    Country = apps.get_model("snpdb", "Country")

    lab_count = Lab.objects.all().count()

    if lab_count:
        country_names = set(Lab.objects.all().order_by("old_country").values_list("old_country", flat=True).distinct())
        for country_name in country_names:
            country, _ = Country.objects.get_or_create(name=country_name)
            Lab.objects.filter(old_country=country_name).update(country=country)

        for state in State.objects.all():
            qs = Lab.objects.filter(Q(old_state__iexact=state.name) | Q(old_state__iexact=state.short_name))
            qs.update(state=state, country=state.country)

        if lab_no_state_count := Lab.objects.filter(state__isnull=True).count():
            print(f"Could not set state in {lab_no_state_count} labs (out of {lab_count} total labs)")


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0052_auto_20211122_1342'),
    ]

    operations = [
        migrations.RunPython(_create_australian_states),
        migrations.RunPython(_one_off_assign_labs_to_states),
    ]
