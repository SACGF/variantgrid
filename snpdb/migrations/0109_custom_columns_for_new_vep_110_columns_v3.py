# Generated by Django 4.2.9 on 2024-01-19 05:24

from django.db import migrations
from django.db.models import F

_BEFORE = -1
_AFTER = 1

# Key = new column, value = column it is inserted after
# Order is kept - put ones with dependencies after dependency
_NEW_COLUMNS = {
    'alphamissense_rankscore': ("bayesdel_noaf_rankscore", _BEFORE),
    'gnomad_fafmax_faf95_max': ('gnomad_filtered', _AFTER),  # This is used in 'default columns' - so used as positional reference
    'gnomad_fafmax_faf99_max': ('gnomad_fafmax_faf95_max', _AFTER),
    'gnomad_faf99': ('gnomad_fafmax_faf95_max', _AFTER),
    'gnomad_faf95': ('gnomad_faf99', _BEFORE),
    'gnomad_mid_af': ("gnomad_nfe_af", _BEFORE),
    'gnomad_hemi_count': ("gnomad_hom_alt", _AFTER),
    'mavedb_urn': ("tissue_specificity_from_uniprotkb", _AFTER),
    'mavedb_score': ("mavedb_urn", _AFTER),
    'gnomad_non_par': ("gnomad_hemi_count", _AFTER),
    'gnomad_xy_af': ('gnomad_non_par', _AFTER),
    'gnomad_xy_ac': ('gnomad_xy_af', _AFTER),
    'gnomad_xy_an': ('gnomad_xy_ac', _AFTER),
}

_COLLECTIONS = {
    "All columns": {},  # Everything
    "Default columns": {'alphamissense_rankscore', 'gnomad_fafmax_faf95_max', 'mavedb_urn'}
}


def _custom_columns_for_new_vep_110_columns_v3(apps, _schema_editor):
    CustomColumnsCollection = apps.get_model("snpdb", "CustomColumnsCollection")
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    for collection_name, columns_set in _COLLECTIONS.items():
        ccc = CustomColumnsCollection.objects.get(name=collection_name)
        for column_name, (insert_column_name, position) in _NEW_COLUMNS.items():
            if columns_set:
                if column_name not in columns_set:
                    continue
            cc_qs = ccc.customcolumn_set.all()
            if insert_column := cc_qs.filter(column_id=insert_column_name).first():
                if position == _BEFORE:
                    qs = cc_qs.filter(sort_order__gte=insert_column.sort_order)
                else:
                    qs = cc_qs.filter(sort_order__gt=insert_column.sort_order)
                qs.update(sort_order=F("sort_order") + 1)
                # print(f"Creating {collection_name}.{column_name}")
                CustomColumn.objects.create(custom_columns_collection=ccc,
                                            sort_order=insert_column.sort_order + position,
                                            column_id=column_name)


def _reverse_custom_columns_for_new_vep_110_columns_v3(apps, _schema_editor):
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    CustomColumn.objects.filter(column__grid_column_name__in=_NEW_COLUMNS).delete()

class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0108_one_off_move_alphamissense_dbnsfp'),
    ]

    operations = [
        migrations.RunPython(_custom_columns_for_new_vep_110_columns_v3,
                             reverse_code=_reverse_custom_columns_for_new_vep_110_columns_v3),

    ]
