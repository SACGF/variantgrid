# Generated by Django 3.2.6 on 2021-11-16 11:32

from django.db import migrations


def _change_all_columns(apps, schema_editor):
    """ This needs to be kept if squishing migrations """
    CustomColumnsCollection = apps.get_model("snpdb", "CustomColumnsCollection")
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    CUSTOM_COLUMNS_ALL = [
        "variant",
        "chrom",
        "position",
        "ref",
        "alt",
        "gene_symbol",
        "tags",
        "tags_global",
        "hgvs_c",
        "impact",
        "consequence",
        "variant_class",
        "Sample",
        "total_db_hom",
        "total_db_het",
        "hgvs_p",
        "overlapping_symbols",
        "gnomad_af",
        "gnomad_popmax",
        "gnomad_popmax_af",
        "gnomad_popmax_ac",
        "gnomad_popmax_an",
        "gnomad_popmax_hom_alt",
        "gnomad_afr_af",
        "gnomad_amr_af",
        "gnomad_asj_af",
        "gnomad_eas_af",
        "gnomad_filtered",
        "gnomad_fin_af",
        "gnomad_an",
        "gnomad_ac",
        "gnomad_hom_alt",
        "gnomad_nfe_af",
        "gnomad_oth_af",
        "gnomad_sas_af",
        "gnomad2_liftover_af",
        "af_1kg",
        "af_uk10k",
        "topmed_af",
        "cadd_phred",
        "fathmm_pred_most_damaging",
        "grantham",
        "loftool",
        "mutation_assessor_pred_most_damaging",
        "mutation_taster_pred_most_damaging",
        "polyphen2_hvar_pred_most_damaging",
        "revel_score",
        "sift",
        "dbscsnv_ada_score",
        "dbscsnv_rf_score",
        "maxentscan_alt",
        "maxentscan_diff",
        "maxentscan_ref",
        "maxentscan_percent_diff_ref",
        "spliceai_pred_ds_ag",
        "spliceai_pred_dp_ag",
        "spliceai_pred_ds_al",
        "spliceai_pred_dp_al",
        "spliceai_pred_ds_dg",
        "spliceai_pred_dp_dg",
        "spliceai_pred_ds_dl",
        "spliceai_pred_dp_dl",
        "spliceai_gene_symbol",
        "splice_region",
        "gerp_pp_rs",
        "phastcons_100_way_vertebrate",
        "phastcons_30_way_mammalian",
        "phastcons_46_way_mammalian",
        "phylop_100_way_vertebrate",
        "phylop_30_way_mammalian",
        "phylop_46_way_mammalian",
        "distance",
        "repeat_masker",
        "pubmed",
        "mastermind_count_1_cdna",
        "mastermind_count_2_cdna_prot",
        "mastermind_count_3_aa_change",
        "mastermind_mmid3",
        "max_internal_classification",
        "internally_classified",
        "clinvar_highest_pathogenicity",
        "clinical_significance",
        "conflicting_clinical_significance",
        "clinvar_review_status",
        "clinvar_clinical_sources",
        "clinvar_origin",
        "drug_response",
        "clinvar_variation_id",
        "clinvar_allele_id",
        "clinvar_preferred_disease_name",
        "clinvar_disease_database_name",
        "amino_acids",
        "canonical",
        "codons",
        "exon",
        "flags",
        "intron",
        "protein_position",
        "symbol",
        "domains",
        "interpro_domain",
        "clingen_allele",
        "cosmic_id",
        "cosmic_legacy_id",
        "cosmic_count",
        "dbsnp_rs_id",
        "ensembl_protein",
        "somatic",
        "gene_biotype",
        "gene_description",
        "gene_id",
        "omim_id",
        "function_from_uniprotkb",
        "transcript_biotype",
        "gene_family_description",
        "gene_family_tag",
        "hgnc_id",
        "hgnc_symbol",
        "hgnc_name",
        "mgi_id",
        "gnomad_oe_lof",
        "omim_terms",
        "hpo_terms",
        "previous_symbols",
        "refseq_gene_summary",
        "rgd_id",
        "synonyms",
        "tissue_specificity_from_uniprotkb",
        "ucsc_id",
        "uniprot_id",
        "uniprot_reactome",
        "pathway_from_uniprotkb",
        "band",
        "ccds_ids",
    ]

    # Get the public all columns
    all_columns = CustomColumnsCollection.objects.get(name='All columns', user=None)
    all_columns.customcolumn_set.all().delete()

    records = []
    for i, column in enumerate(CUSTOM_COLUMNS_ALL):
        records.append(CustomColumn(custom_columns_collection=all_columns, column_id=column, sort_order=i))
    CustomColumn.objects.bulk_create(records)


def _change_descriptions(apps, schema_editor):
    VariantGridColumn = apps.get_model("snpdb", "VariantGridColumn")
    COLUMN_DESCRIPTIONS = {
        # Some gene columns explicitly mentioned Ensembl (while we could be using RefSeq annotation)
        "symbol": "Gene Symbol (VEP)",
        "gene_symbol": "Gene Symbol (most recent name associated with assigned transcript)",
        "gene_id": "Ensembl / RefSeq Gene ID",
        # Was a copy/paste error
        "uniprot_reactome": 'Pathways and processes from <a href="http://www.uniprot.org">Universal Protein Knowledgebase.</a>',
    }

    for pk, description in COLUMN_DESCRIPTIONS.items():
        VariantGridColumn.objects.filter(pk=pk).update(description=description)


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0049_clinvarkeyexcludepattern'),
    ]

    operations = [
        migrations.RunPython(_change_all_columns),
        migrations.RunPython(_change_descriptions),
    ]
