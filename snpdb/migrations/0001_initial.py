# Generated by Django 3.1 on 2020-09-29 05:30

import django.contrib.postgres.fields
import django.db.models.deletion
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models

import library.django_utils
import library.django_utils.django_postgres
import library.django_utils.guardian_permissions_mixin


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('flags', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('patients', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Allele',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AlleleSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ClinGenAllele',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('api_response', models.JSONField()),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cohort',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('version', models.IntegerField(default=0)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('sample_count', models.IntegerField(null=True)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(library.django_utils.SortByPKMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CohortGenotypeTaskVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CohortSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cohort_genotype_packed_field_index', models.IntegerField()),
                ('sort_order', models.IntegerField()),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohort')),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Contig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('role', models.CharField(choices=[('AM', 'assembled-molecule'), ('ULS', 'unlocalized-scaffold'), ('UPS', 'unplaced-scaffold'), ('ALT', 'alt-scaffold'), ('FP', 'fix-patch'), ('NP', 'novel-patch')], max_length=3)),
                ('assigned_molecule', models.TextField(blank=True, null=True)),
                ('molecule_type', models.CharField(blank=True, choices=[('C', 'Chromosome'), ('M', 'Mitochondrion')], max_length=1, null=True)),
                ('genbank_accession', models.TextField(null=True)),
                ('refseq_accession', models.TextField(unique=True)),
                ('ucsc_name', models.TextField(null=True)),
                ('length', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomColumn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomColumnsCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version_id', models.IntegerField(default=0)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DbSNP',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('api_response', models.JSONField()),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenomeBuild',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('accession', models.TextField(null=True)),
                ('alias', models.TextField(null=True, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('igv_genome', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model, library.django_utils.SortMetaOrderingMixin),
        ),
        migrations.CreateModel(
            name='GenomeFasta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(unique=True)),
                ('index_filename', models.TextField()),
                ('index_md5sum', models.TextField()),
                ('annotation_consortium', models.CharField(choices=[('R', 'RefSeq'), ('E', 'Ensembl')], max_length=1)),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
            ],
        ),
        migrations.CreateModel(
            name='GenomicIntervalsCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='GenomicIntervalsCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('processed_file', models.TextField(blank=True, null=True)),
                ('processed_records', models.IntegerField(blank=True, null=True)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomicintervalscategory')),
                ('genome_build', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=(library.django_utils.guardian_permissions_mixin.GuardianPermissionsAutoInitialSaveMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Lab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('external', models.BooleanField(blank=True, default=False)),
                ('city', models.TextField()),
                ('state', models.TextField(null=True)),
                ('country', models.TextField()),
                ('url', models.TextField(blank=True)),
                ('css_class', models.TextField(blank=True)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('long', models.FloatField(blank=True, null=True)),
                ('group_name', models.TextField(blank=True, null=True, unique=True)),
                ('variant_classification_config', models.JSONField(blank=True, null=True)),
                ('upload_location', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LabProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leader', models.TextField()),
                ('members', models.TextField(blank=True)),
                ('families', models.IntegerField(default=0)),
                ('involved', models.BooleanField(default=False)),
                ('date', models.DateField()),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab')),
            ],
        ),
        migrations.CreateModel(
            name='Liftover',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('conversion_tool', models.CharField(choices=[('CA', 'ClinGen Allele Registry'), ('DB', 'dbSNP API'), ('NR', 'NCBI Remap')], max_length=2)),
                ('source_vcf', models.TextField(null=True)),
                ('allele_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.allelesource')),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('source_genome_build', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='liftover_source_genome_build', to='snpdb.genomebuild')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Locus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(db_index=True)),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.contig')),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('short_name', models.TextField(null=True)),
                ('group_name', models.TextField(blank=True, null=True, unique=True)),
                ('variant_classification_config', models.JSONField(blank=True, null=True)),
                ('classification_report_template', models.TextField(blank=True, null=True)),
                ('active', models.BooleanField(blank=True, default=True)),
            ],
            options={
                'verbose_name': 'Organisation',
                'verbose_name_plural': 'Organisations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vcf_sample_name', models.TextField()),
                ('name', models.TextField()),
                ('no_dna_control', models.BooleanField(default=False)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('bam_file_path', models.TextField(blank=True, null=True)),
                ('variants_type', models.CharField(choices=[('U', 'Unknown'), ('G', 'Germline'), ('M', 'Mixed (Single Sample)'), ('S', 'Somatic only (Tumor minus normal)')], default='U', max_length=1)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.patient')),
                ('specimen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.specimen')),
            ],
            bases=(library.django_utils.SortByPKMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seq', models.TextField()),
                ('seq_md5_hash', models.CharField(max_length=32, unique=True)),
                ('length', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SettingsOverride',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_weekly_updates', models.BooleanField(blank=True, null=True)),
                ('email_discordance_updates', models.BooleanField(blank=True, null=True)),
                ('variant_link_in_analysis_opens_new_tab', models.BooleanField(null=True)),
                ('tool_tips', models.BooleanField(blank=True, null=True)),
                ('node_sql_tab', models.BooleanField(blank=True, null=True)),
                ('import_messages', models.BooleanField(blank=True, null=True)),
                ('igv_port', models.IntegerField(blank=True, null=True)),
                ('columns', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.customcolumnscollection')),
                ('default_genome_build', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('default_sort_by_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.customcolumn')),
            ],
        ),
        migrations.CreateModel(
            name='SiteMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_level', models.CharField(choices=[('D', 'DEBUG'), ('I', 'INFO'), ('W', 'WARNING'), ('E', 'ERROR')], default='I', max_length=1)),
                ('message', models.TextField()),
                ('date_time', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sequence')),
                ('locus', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.locus')),
            ],
            options={
                'unique_together': {('locus', 'alt')},
            },
        ),
        migrations.CreateModel(
            name='VariantCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True)),
                ('count', models.IntegerField(null=True)),
                ('status', models.CharField(choices=[('C', 'Created'), ('P', 'Processing'), ('E', 'Error'), ('S', 'Success'), ('K', 'Skipped'), ('T', 'Terminated Early'), ('Z', 'Timed Out')], default='C', max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariantGridColumn',
            fields=[
                ('grid_column_name', models.TextField(primary_key=True, serialize=False)),
                ('variant_column', models.TextField()),
                ('annotation_level', models.CharField(choices=[('C', 'ClinVar'), ('D', 'Database'), ('G', 'Gene'), ('S', 'Sample'), ('T', 'Transcript'), ('V', 'Variant')], max_length=1, null=True)),
                ('width', models.IntegerField(null=True)),
                ('label', models.TextField()),
                ('description', models.TextField()),
                ('model_field', models.BooleanField(default=True)),
                ('queryset_field', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='VariantZygosityCountCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VCF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True)),
                ('date', models.DateTimeField()),
                ('genotype_samples', models.IntegerField()),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('header', models.TextField(null=True)),
                ('source', models.TextField(blank=True)),
                ('allele_depth_field', models.TextField(null=True)),
                ('ref_depth_field', models.TextField(null=True)),
                ('alt_depth_field', models.TextField(null=True)),
                ('read_depth_field', models.TextField(null=True)),
                ('genotype_quality_field', models.TextField(null=True)),
                ('phred_likelihood_field', models.TextField(null=True)),
                ('fake_data', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='patients.fakedata')),
                ('genome_build', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VCFSourceSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_regex', models.TextField()),
                ('operation', models.TextField()),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Wiki',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('markdown', models.TextField()),
                ('last_edited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('settingsoverride_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.settingsoverride')),
            ],
            bases=('snpdb.settingsoverride',),
        ),
        migrations.CreateModel(
            name='VCFTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.tag')),
                ('vcf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf')),
            ],
        ),
        migrations.CreateModel(
            name='VCFFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_code', models.CharField(max_length=1)),
                ('filter_id', models.TextField()),
                ('description', models.TextField(null=True)),
                ('vcf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf')),
            ],
        ),
        migrations.CreateModel(
            name='VCFBedIntersection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('status', models.CharField(choices=[('C', 'Created'), ('P', 'Processing'), ('E', 'Error'), ('S', 'Success'), ('K', 'Skipped'), ('T', 'Terminated Early'), ('Z', 'Timed Out')], default='C', max_length=1)),
                ('error_exception', models.TextField(blank=True, null=True)),
                ('left_padding', models.IntegerField(default=0)),
                ('right_padding', models.IntegerField(default=0)),
                ('genomic_intervals', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomicintervalscollection')),
                ('variant_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantcollection')),
                ('vcf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf')),
            ],
        ),
        migrations.CreateModel(
            name='VariantCollectionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
                ('variant_collection', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='snpdb.variantcollection')),
            ],
        ),
        migrations.CreateModel(
            name='VariantAllele',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('origin', models.CharField(choices=[('D', 'Imported as this build'), ('N', 'Imported (normalized)'), ('L', 'Liftover'), ('M', 'Liftover (normalized)')], max_length=1)),
                ('conversion_tool', models.CharField(choices=[('CA', 'ClinGen Allele Registry'), ('DB', 'dbSNP API'), ('NR', 'NCBI Remap')], max_length=2)),
                ('error', models.JSONField(null=True)),
                ('allele', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.allele')),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('variant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTagColors',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rgb', models.CharField(max_length=7)),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.tag')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserDataPrefix',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.TextField()),
                ('replacement', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Trio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True)),
                ('mother_affected', models.BooleanField(default=False)),
                ('father_affected', models.BooleanField(default=False)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohort')),
                ('father', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trio_father', to='snpdb.cohortsample')),
                ('mother', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trio_mother', to='snpdb.cohortsample')),
                ('proband', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trio_proband', to='snpdb.cohortsample')),
            ],
            bases=(library.django_utils.guardian_permissions_mixin.GuardianPermissionsMixin, library.django_utils.SortByPKMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SettingsInitialGroupPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read', models.BooleanField(blank=True, null=True)),
                ('write', models.BooleanField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.settingsoverride')),
            ],
        ),
        migrations.CreateModel(
            name='SettingsGenomeBuild',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.settingsoverride')),
            ],
        ),
        migrations.CreateModel(
            name='SampleTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.tag')),
            ],
        ),
        migrations.CreateModel(
            name='SampleStatsPassingFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('variant_count', models.IntegerField(default=0)),
                ('snp_count', models.IntegerField(default=0)),
                ('insertions_count', models.IntegerField(default=0)),
                ('deletions_count', models.IntegerField(default=0)),
                ('ref_count', models.IntegerField(default=0)),
                ('het_count', models.IntegerField(default=0)),
                ('hom_count', models.IntegerField(default=0)),
                ('unk_count', models.IntegerField(default=0)),
                ('x_hom_count', models.IntegerField(default=0)),
                ('x_het_count', models.IntegerField(default=0)),
                ('x_unk_count', models.IntegerField(default=0)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('variant_count', models.IntegerField(default=0)),
                ('snp_count', models.IntegerField(default=0)),
                ('insertions_count', models.IntegerField(default=0)),
                ('deletions_count', models.IntegerField(default=0)),
                ('ref_count', models.IntegerField(default=0)),
                ('het_count', models.IntegerField(default=0)),
                ('hom_count', models.IntegerField(default=0)),
                ('unk_count', models.IntegerField(default=0)),
                ('x_hom_count', models.IntegerField(default=0)),
                ('x_het_count', models.IntegerField(default=0)),
                ('x_unk_count', models.IntegerField(default=0)),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleLabProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.labproject')),
                ('sample', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
        ),
        migrations.AddField(
            model_name='sample',
            name='vcf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf'),
        ),
        migrations.CreateModel(
            name='NodeCountSettingsCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('settings', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.settingsoverride')),
            ],
        ),
        migrations.CreateModel(
            name='NodeCountSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('built_in_filter', models.CharField(choices=[('T', 'Total'), ('C', 'ClinVar'), ('O', 'OMIM Phenotype'), ('I', 'High or Mod impact'), ('G', 'Classified'), ('P', 'Classified Pathogenic'), ('M', 'COSMIC')], max_length=1, null=True)),
                ('sort_order', models.IntegerField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.nodecountsettingscollection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='locus',
            name='ref',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sequence'),
        ),
        migrations.AddField(
            model_name='lab',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.organization'),
        ),
        migrations.CreateModel(
            name='GenomicInterval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom', models.TextField()),
                ('start', models.IntegerField()),
                ('end', models.IntegerField()),
                ('genomic_intervals_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomicintervalscollection')),
            ],
        ),
        migrations.CreateModel(
            name='GenomeFastaContig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('length', models.IntegerField()),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.contig')),
                ('genome_fasta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomefasta')),
            ],
        ),
        migrations.CreateModel(
            name='GenomeBuildContig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField()),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.contig')),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
            ],
        ),
        migrations.AddField(
            model_name='customcolumn',
            name='column',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantgridcolumn'),
        ),
        migrations.AddField(
            model_name='customcolumn',
            name='custom_columns_collection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.customcolumnscollection'),
        ),
        migrations.AddField(
            model_name='cohortsample',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample'),
        ),
        migrations.CreateModel(
            name='CohortGenotypeCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True)),
                ('cohort_version', models.IntegerField()),
                ('celery_task', models.CharField(max_length=36, null=True)),
                ('marked_for_deletion', models.BooleanField(default=False)),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohort')),
                ('task_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohortgenotypetaskversion')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CohortGenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_count', models.IntegerField(default=0)),
                ('het_count', models.IntegerField(default=0)),
                ('hom_count', models.IntegerField(default=0)),
                ('filters', models.TextField(null=True)),
                ('samples_zygosity', models.TextField()),
                ('samples_allele_depth', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('samples_allele_frequency', django.contrib.postgres.fields.ArrayField(base_field=library.django_utils.django_postgres.PostgresRealField(), null=True, size=None)),
                ('samples_read_depth', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('samples_genotype_quality', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('samples_phred_likelihood', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohortgenotypecollection')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
        ),
        migrations.AddField(
            model_name='cohort',
            name='genome_build',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='parent_cohort',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='sub_cohort_set', to='snpdb.cohort'),
        ),
        migrations.AddField(
            model_name='cohort',
            name='vcf',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf'),
        ),
        migrations.CreateModel(
            name='CachedGeneratedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.TextField(null=True)),
                ('exception', models.TextField(null=True)),
                ('generator', models.TextField()),
                ('params_hash', models.TextField()),
                ('task_id', models.CharField(max_length=36, null=True)),
                ('task_status', models.TextField(null=True)),
                ('generate_start', models.DateTimeField(null=True)),
                ('generate_end', models.DateTimeField(null=True)),
            ],
            options={
                'unique_together': {('generator', 'params_hash')},
            },
        ),
        migrations.CreateModel(
            name='AlleleMergeLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('conversion_tool', models.CharField(choices=[('CA', 'ClinGen Allele Registry'), ('DB', 'dbSNP API'), ('NR', 'NCBI Remap')], max_length=2)),
                ('success', models.BooleanField(default=True)),
                ('message', models.TextField(null=True)),
                ('new_allele', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_allele_merge', to='snpdb.allele')),
                ('old_allele', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_allele_merge', to='snpdb.allele')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='allele',
            name='clingen_allele',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.clingenallele'),
        ),
        migrations.AddField(
            model_name='allele',
            name='flag_collection',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='flags.flagcollection'),
        ),
        migrations.CreateModel(
            name='VariantZygosityCountForVCF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('count_complete', models.DateTimeField(null=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('is_split_to_sample_counts', models.BooleanField(default=False)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantzygositycountcollection')),
                ('vcf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcf')),
            ],
            options={
                'unique_together': {('collection', 'vcf')},
            },
        ),
        migrations.CreateModel(
            name='VariantZygosityCountForSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('count_complete', models.DateTimeField(null=True)),
                ('deleted', models.DateTimeField(null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantzygositycountcollection')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
            options={
                'unique_together': {('collection', 'sample')},
            },
        ),
        migrations.CreateModel(
            name='VariantZygosityCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref_count', models.IntegerField(default=0)),
                ('het_count', models.IntegerField(default=0)),
                ('hom_count', models.IntegerField(default=0)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantzygositycountcollection')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
            options={
                'unique_together': {('variant', 'collection')},
            },
        ),
        migrations.CreateModel(
            name='VariantWiki',
            fields=[
                ('wiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.wiki')),
                ('variant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('snpdb.wiki',),
        ),
        migrations.CreateModel(
            name='UserSettingsOverride',
            fields=[
                ('settingsoverride_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.settingsoverride')),
                ('oauth_sub', models.TextField(blank=True, null=True)),
                ('default_lab', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.lab')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            bases=('snpdb.settingsoverride',),
        ),
        migrations.CreateModel(
            name='UserPageAck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('page_id', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'page_id')},
            },
        ),
        migrations.CreateModel(
            name='UserGridConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grid_name', models.TextField()),
                ('rows', models.IntegerField(default=10)),
                ('show_group_data', models.BooleanField(default=True)),
                ('show_incomplete_data', models.BooleanField(default=False)),
                ('show_hidden_data', models.BooleanField(default=False)),
                ('filter_name', models.TextField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'grid_name')},
            },
        ),
        migrations.CreateModel(
            name='SampleLocusCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locus_count', models.IntegerField()),
                ('count', models.IntegerField()),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
            options={
                'unique_together': {('sample', 'locus_count')},
            },
        ),
        migrations.CreateModel(
            name='OrganizationUserSettingsOverride',
            fields=[
                ('settingsoverride_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.settingsoverride')),
                ('organization', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.organization')),
            ],
            bases=('snpdb.settingsoverride',),
        ),
        migrations.AlterUniqueTogether(
            name='locus',
            unique_together={('contig', 'position', 'ref')},
        ),
        migrations.CreateModel(
            name='LiftoverError',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_message', models.TextField()),
                ('allele', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.allele')),
                ('liftover', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.liftover')),
                ('variant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
            options={
                'unique_together': {('liftover', 'allele')},
            },
        ),
        migrations.CreateModel(
            name='LabUserSettingsOverride',
            fields=[
                ('settingsoverride_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.settingsoverride')),
                ('lab', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab')),
            ],
            bases=('snpdb.settingsoverride',),
        ),
        migrations.CreateModel(
            name='LabHead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.lab')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('lab', 'user')},
            },
        ),
        migrations.AddConstraint(
            model_name='genomefastacontig',
            constraint=models.UniqueConstraint(fields=('genome_fasta', 'name'), name='one_name_per_build'),
        ),
        migrations.AddConstraint(
            model_name='genomefastacontig',
            constraint=models.UniqueConstraint(fields=('genome_fasta', 'contig'), name='one_contig_per_build'),
        ),
        migrations.AlterUniqueTogether(
            name='genomefasta',
            unique_together={('genome_build', 'annotation_consortium')},
        ),
        migrations.AlterUniqueTogether(
            name='genomebuildcontig',
            unique_together={('genome_build', 'contig')},
        ),
        migrations.AlterUniqueTogether(
            name='customcolumn',
            unique_together={('custom_columns_collection', 'column')},
        ),
        migrations.AlterUniqueTogether(
            name='cohortsample',
            unique_together={('cohort', 'cohort_genotype_packed_field_index')},
        ),
    ]
