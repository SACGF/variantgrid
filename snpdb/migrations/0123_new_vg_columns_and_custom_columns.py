# Generated by Django 4.2.10 on 2024-04-03 22:11

from django.db import migrations
from django.db.models import F

from library.django_utils import bulk_insert_class_data

_BEFORE = -1
_AFTER = 1

# Key = new column, value = column it is inserted after
# Order is kept - put ones with dependencies after dependency
_NEW_COLUMNS = {
    'total_db_ref': ('total_db_hom', _BEFORE),
    'total_db_unk': ('total_db_het', _AFTER),
    'svlen': ('alt', _AFTER),
    'hgvs_g': ('hgvs_c', _BEFORE),
    'predictions_num_benign': ('splice_region', _AFTER),
    'predictions_num_pathogenic': ('splice_region', _AFTER),
}

_COLLECTIONS = {
    "All columns": {},  # Everything
    "Default columns": {'total_db_ref', 'total_db_unk', 'svlen', 'hgvs_g'}
}


def _add_vg_columns(apps, schema_editor):
    VARIANT_LEVEL = 'V'
    DATABASE_LEVEL = 'D'

    NEW_VARIANT_GRID_COLUMNS = [
        {'grid_column_name': 'total_db_ref',
         'variant_column': 'global_variant_zygosity__ref_count',
         'annotation_level': DATABASE_LEVEL,
         'width': None,
         'label': 'DB ref count',
         'description': 'Database ref zygosity count',
         'model_field': False,
         'queryset_field': True},
        {'grid_column_name': 'total_db_unk',
         'variant_column': 'global_variant_zygosity__unk_count',
         'annotation_level': DATABASE_LEVEL,
         'width': None,
         'label': 'DB ? count',
         'description': 'Database unknown zygosity count',
         'model_field': False,
         'queryset_field': True},
        {'grid_column_name': 'svlen',
         'variant_column': 'svlen',
         'annotation_level': None,
         'width': None,
         'label': 'SVLEN',
         'description': 'Structural Variant Length',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'hgvs_g',
         'variant_column': 'variantannotation__hgvs_g',
         'annotation_level': VARIANT_LEVEL,
         'width': None,
         'label': 'HGVS genomic',
         'description': 'HGVS genomic coordinate',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'predictions_num_benign',
         'variant_column': 'variantannotation__predictions_num_benign',
         'annotation_level': VARIANT_LEVEL,
         'width': None,
         'label': 'No. Path Pred benign',
         'description': 'No. Pathogenic prediction tools that are benign',
         'model_field': True,
         'queryset_field': True},
        {'grid_column_name': 'predictions_num_pathogenic',
         'variant_column': 'variantannotation__predictions_num_pathogenic',
         'annotation_level': VARIANT_LEVEL,
         'width': None,
         'label': 'No. Path Pred pathogenic',
         'description': 'No. Pathogenic prediction tools that are pathogenic',
         'model_field': True,
         'queryset_field': True},
    ]

    INTEGER = 'I'
    STRING = 'S'

    NEW_COLUMN_VCF_INFO = [
        {'info_id': 'TOTAL_DB_REF',
         'column_id': 'total_db_ref',
         'number': 1,
         'type': INTEGER,
         'description': 'Total number of variants in database with HOM REF zygosity call'},
        {'info_id': 'TOTAL_DB_UNK',
         'column_id': 'total_db_unk',
         'number': 1,
         'type': INTEGER,
         'description': 'Total number of variants in database with HOM REF zygosity call'},
        {'info_id': 'SVLEN',
         'column_id': 'svlen',
         'number': 1,
         'type': INTEGER,
         'description': 'Structural Variant Length'},
        {'info_id': 'HGVS_G',
         'column_id': 'hgvs_g',
         'number': 1,
         'type': STRING,
         'description': 'Genomic HGVS coordinate'},
        {'info_id': 'PATHOGENICITY_PREDICTIONS_NUM_BENIGN',
         'column_id': 'predictions_num_benign',
         'number': 1,
         'type': INTEGER,
         'description': 'No. Pathogenic prediction tools that are benign'},
        {'info_id': 'PATHOGENICITY_PREDICTIONS_NUM_PATHOGENIC',
         'column_id': 'predictions_num_pathogenic',
         'number': 1,
         'type': INTEGER,
         'description': 'No. Pathogenic prediction tools that are pathogenic'},
    ]

    bulk_insert_class_data(apps, "snpdb", [("VariantGridColumn", NEW_VARIANT_GRID_COLUMNS)])
    bulk_insert_class_data(apps, "snpdb", [("ColumnVCFInfo", NEW_COLUMN_VCF_INFO)])


def _custom_columns_for_new_vg_columns(apps, _schema_editor):
    CustomColumnsCollection = apps.get_model("snpdb", "CustomColumnsCollection")
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    for collection_name, columns_set in _COLLECTIONS.items():
        ccc = CustomColumnsCollection.objects.get(name=collection_name)
        for column_name, (insert_column_name, position) in _NEW_COLUMNS.items():
            if columns_set:
                if column_name not in columns_set:
                    continue
            cc_qs = ccc.customcolumn_set.all()
            if insert_column := cc_qs.filter(column_id=insert_column_name).first():
                if position == _BEFORE:
                    qs = cc_qs.filter(sort_order__gte=insert_column.sort_order)
                else:
                    qs = cc_qs.filter(sort_order__gt=insert_column.sort_order)
                qs.update(sort_order=F("sort_order") + 1)
                # print(f"Creating {collection_name}.{column_name}")
                CustomColumn.objects.create(custom_columns_collection=ccc,
                                            sort_order=insert_column.sort_order + position,
                                            column_id=column_name)


def _reverse_remove_new_vg_columns(apps, _schema_editor):
    VariantGridColumn = apps.get_model("snpdb", "VariantGridColumn")
    VariantGridColumn.objects.filter(grid_column_name__in=_NEW_COLUMNS).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0122_new_gnomad_sv_overlap_column_vep_fields2'),
    ]

    operations = [
        migrations.RunPython(_add_vg_columns,
                             reverse_code=_reverse_remove_new_vg_columns),

        migrations.RunPython(_custom_columns_for_new_vg_columns,
                             reverse_code=migrations.RunPython.noop),
    ]
