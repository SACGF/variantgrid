# Generated by Django 4.2.9 on 2024-02-14 04:52
import itertools
import operator
from collections import defaultdict
from functools import reduce

from bioutils.sequences import reverse_complement
from django.db import migrations
from django.db.models import Q

from library.utils import sha256sum_str


def _one_off_inv_symbolic(apps, _schema_editor):
    Variant = apps.get_model("snpdb", "Variant")
    Locus = apps.get_model("snpdb", "Locus")
    Sequence = apps.get_model("snpdb", "Sequence")

    sequences_by_length = defaultdict(set)
    qs = Sequence.objects.filter(length__gte=1000)
    for sequence in qs:
        sequences_by_length[sequence.length].add(sequence)

    possible_inversions = []
    total_checks = 0
    for sequences in sequences_by_length.values():
        if len(sequences) > 1:
            for a, b in itertools.combinations(sequences, 2):
                total_checks += 1
                if a.seq == reverse_complement(b.seq):
                    possible_inversions.append((a,b))

    if possible_inversions:
        q_or_list = []
        for a,b in possible_inversions:
            q = (Q(locus__ref=a) & Q(alt=b)) | (Q(locus__ref=b) & Q(alt=a))
            q_or_list.append(q)

        q = reduce(operator.or_, q_or_list)

        base_lookup = {s: Sequence.objects.get(seq=s) for s in "GATC"}
        symbolic_alt = "<INV>"
        inv, _ = Sequence.objects.get_or_create(seq=symbolic_alt,
                                                seq_sha256_hash=sha256sum_str(symbolic_alt),
                                                length=len(symbolic_alt))  # This is wrong, but will remove this eventually

        # There are so few of these, that we can just do them 1 by 1
        qs = Variant.objects.filter(q)
        print(f"Converting {qs.count()} variants to {symbolic_alt}")
        for v in Variant.objects.filter(q):
            old_ref_seq = v.locus.ref.seq
            new_ref = base_lookup[old_ref_seq[0]]
            new_locus = Locus.objects.get_or_create(contig=v.locus.contig,
                                                    position=v.locus.position,
                                                    ref=new_ref)[0]
            v.locus = new_locus
            v.alt = inv
            v.svlen = len(old_ref_seq) - 1  # ref has shrunk to 1, so svlen (=alt - ref) is 1 off
            v.save()


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0137_md5_to_sha256'),
    ]

    operations = [
        migrations.RunPython(_one_off_inv_symbolic)
    ]
