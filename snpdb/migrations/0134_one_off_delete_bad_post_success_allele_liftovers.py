# Generated by Django 4.2.10 on 2024-05-23 05:40
import logging

from django.db import migrations

def _one_off_delete_bad_post_success_allele_liftovers(apps, _schema_editor):
    """
        This is to clean up historical liftovers made from one_off_legacy_populate_allele_liftover
        We would never run any tool after a success, so any made were in error """
    AlleleLiftover = apps.get_model("snpdb", "AlleleLiftover")
    GenomeBuild = apps.get_model("snpdb", "GenomeBuild")

    for genome_build_name in ["GRCh37", "GRCh38"]:
        genome_build = GenomeBuild.objects.get(name=genome_build_name)

        # We created some successful ClingenAllele liftover runs, that should have failed
        qs_failed_clingen = AlleleLiftover.objects.filter(liftover__genome_build=genome_build, status='E',
                                                          error__icontains='genomicAlleles')
        alleles_failed_clingen = list(qs_failed_clingen.values_list("allele_id", flat=True))
        AlleleLiftover.objects.filter(liftover__genome_build=genome_build, liftover__conversion_tool='CA', status='S',
                                      allele__in=alleles_failed_clingen).delete()

        # Now find first success - anything after that wouldn't have run
        qs = AlleleLiftover.objects.filter(liftover__genome_build=genome_build, status='S')
        # As we go in reverse order, last one in will be earliest
        first_liftover_success = dict(qs.order_by("-pk").values_list("allele_id", "pk"))
        delete_set = set()
        al_build_qs = AlleleLiftover.objects.filter(liftover__genome_build=genome_build)
        for allele_id, pk in al_build_qs.values_list("allele_id", "pk"):
            if success_pk := first_liftover_success.get(allele_id):
                if success_pk < pk:
                    delete_set.add(pk)

        data = AlleleLiftover.objects.filter(pk__in=delete_set).delete()
        if data:
            logging.info("Deleted %s", data)


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0133_one_off_set_cgc_common'),
    ]

    operations = [
        migrations.RunPython(_one_off_delete_bad_post_success_allele_liftovers),
    ]
