# Generated by Django 4.1.3 on 2023-06-23 06:45

from django.db import migrations
from django.db.models import F


def _columns_collections_add_internally_classified_labs(apps, _schema_editor):
    # Add it after the last internal column name in a custom columns collection
    CustomColumnsCollection = apps.get_model("snpdb", "CustomColumnsCollection")
    CustomColumn = apps.get_model("snpdb", "CustomColumn")

    internal_classification_columns = ["max_internal_classification", "internally_classified"]
    new_column_name = 'internally_classified_labs'
    ccc_qs = CustomColumnsCollection.objects.filter(customcolumn__column__grid_column_name__in=internal_classification_columns)
    ccc_qs = ccc_qs.exclude(customcolumn__column__grid_column_name=new_column_name)
    custom_columns = []
    for ccc in ccc_qs.distinct():
        if last_internal_class_column := ccc.customcolumn_set.filter(column__grid_column_name__in=internal_classification_columns).order_by("sort_order").last():
            insert_point = last_internal_class_column.sort_order
            ccc.customcolumn_set.filter(sort_order__gt=insert_point).update(sort_order=F("sort_order") + 1)
            custom_columns.append(CustomColumn(custom_columns_collection=ccc,
                                               sort_order=insert_point + 1,
                                               column_id=new_column_name))
    if custom_columns:
        CustomColumn.objects.bulk_create(custom_columns)


class Migration(migrations.Migration):

    dependencies = [
        ('snpdb', '0097_new_column_internally_classified_labs'),
    ]

    operations = [
        migrations.RunPython(_columns_collections_add_internally_classified_labs)
    ]
