# Generated by Django 4.0.7 on 2022-12-06 03:14

from django.db import migrations
import json


def duplicate_citations(apps, schema_editor):
    print("About to populate Citation2")
    Citation = apps.get_model("annotation", "Citation")
    Citation2 = apps.get_model("annotation", "Citation2")
    CachedCitation = apps.get_model("annotation", "CachedCitation")
    all_citation_2s = list()
    for citation in Citation.objects.all():
        if len(all_citation_2s) % 1000 == 0:
            print(f"Migrated {len(all_citation_2s)} citations")

        citation_json = None
        if cached := CachedCitation.objects.filter(citation=citation).first():
            if json_string := cached.json_string:
                try:
                    citation_json = json.loads(json_string)
                except RuntimeError as re:
                    print(re)

        source = citation.citation_source
        if source == "P":
            all_citation_2s.append(Citation2(
                pk=f"PMID:{citation.citation_id}",
                old_id=citation.pk,
                source="PMID",
                index=citation.citation_id,
                data_json=citation_json
            ))
        elif source == "C":
            all_citation_2s.append(Citation2(
                pk=f"PMCID:PMC{citation.citation_id}",
                old_id=citation.pk,
                source="PMCID",
                index=citation.citation_id,
                data_json=citation_json
            ))
        elif source == "N":
            all_citation_2s.append(Citation2(
                pk=f"{citation.citation_id}",
                old_id=citation.pk,
                source="NBK",
                index=citation.citation_id,
                data_json=citation_json
            ))
    Citation2.objects.bulk_create(objs=all_citation_2s, ignore_conflicts=True, batch_size=1000)
    print(f"Completed {len(all_citation_2s)} migrations")


def migrate_gene_symbol_citations(apps, schema_editor):
    all_gene_symbol_citations = list()
    GeneSymbolCitation = apps.get_model("annotation", "GeneSymbolCitation")
    Citation2 = apps.get_model("annotation", "Citation2")
    for gene_symbol_citation in GeneSymbolCitation.objects.all():
        if len(all_gene_symbol_citations) % 1000 == 0:
            print(f"Migrated {len(all_gene_symbol_citations)} gene_symbol_citation")
        old_id = gene_symbol_citation.citation_id
        new_citation = Citation2.objects.get(old_id=old_id)
        gene_symbol_citation.citation2 = new_citation
        all_gene_symbol_citations.append(gene_symbol_citation)
    GeneSymbolCitation.objects.bulk_update(objs=all_gene_symbol_citations, fields=['citation2'], batch_size=1000)
    print(f"Completed {len(all_gene_symbol_citations)} migrations")


def migrate_clinvar_citations(apps, schema_editor):
    print("Migrating ClinVarCitations")
    all_clinvar_citations = list()
    ClinVarCitation = apps.get_model("annotation", "ClinVarCitation")
    Citation2 = apps.get_model("annotation", "Citation2")

    print("Preparing old_id to new_id mapping")
    citation_map = dict()
    for mapping in Citation2.objects.all().values_list('old_id', 'id'):
        citation_map[mapping[0]] = mapping[1]

    for clinvar_citation in ClinVarCitation.objects.filter(citation__isnull=False):
        #if len(all_clinvar_citations) % 1000 == 0:
        #    print(f"Migrated {len(all_clinvar_citations)} clinvar_citations")
        old_id = clinvar_citation.citation_id
        clinvar_citation.citation2_id = citation_map[old_id]
        all_clinvar_citations.append(clinvar_citation)
    print(f"About to bulk update {len(all_clinvar_citations)} clinvar_citations - this may take a very long time")
    ClinVarCitation.objects.bulk_update(objs=all_clinvar_citations, fields=['citation2'], batch_size=10000)
    print(f"Completed {len(all_clinvar_citations)} migrations")



class Migration(migrations.Migration):

    dependencies = [
        ('annotation', '0063_citation2_clinvarcitation_citation2_and_more'),
    ]

    operations = [
        #migrations.RunPython(duplicate_citations),
        #migrations.RunPython(migrate_gene_symbol_citations),
        migrations.RunPython(migrate_clinvar_citations)
    ]
