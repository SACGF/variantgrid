# Generated by Django 4.2.10 on 2024-03-18 02:30
import os

from django.conf import settings
from django.db import migrations

from manual.operations.manual_operations import ManualOperation


def _check_needs_vep_download_fasta(apps):
    GenomeBuild = apps.get_model("snpdb", "GenomeBuild")
    VariantAnnotationVersion = apps.get_model("annotation", "VariantAnnotationVersion")

    enabled_annotation = []
    for build_name, values in settings.ANNOTATION.items():
        if values.get("enabled"):
            enabled_annotation.append(build_name)
    builds_with_annotation = GenomeBuild.objects.filter(name__in=enabled_annotation).order_by('name')

    for genome_build in builds_with_annotation:
        qs = VariantAnnotationVersion.objects.filter(genome_build=genome_build, active=True)
        vav = qs.order_by("annotation_date").last()
        org_name = "homo_sapiens"

        build_settings = settings.ANNOTATION[genome_build.name]
        annotation_consortium = build_settings["annotation_consortium"]
        if annotation_consortium == "RefSeq":
            org_name += "_refseq"

        dir_name = os.path.join(settings.ANNOTATION_VEP_CACHE_DIR, org_name, f"{vav.vep}_{genome_build.name}")

        FASTA_FILES = {
            "GRCh37": "Homo_sapiens.GRCh37.75.dna.primary_assembly.fa.gz",
            "GRCh38": "Homo_sapiens.GRCh38.dna.toplevel.fa.gz",
        }
        filename = FASTA_FILES[genome_build.name]
        fasta_file = os.path.join(dir_name, filename)
        # print(f"Checking for existance of file: '{fasta_file}'")
        if not os.path.exists(fasta_file):
            return True

    return False


class Migration(migrations.Migration):
    dependencies = [
        ("annotation", "0091_one_off_populate_missing_symbolic_hgvs"),
    ]

    operations = [
        ManualOperation.operation_manage(["vep_download_fasta"],
                                         test=_check_needs_vep_download_fasta)
    ]
