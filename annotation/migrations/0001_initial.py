# Generated by Django 3.1 on 2020-09-29 05:33

import django.db.models.deletion
import django_dag.models
import django_extensions.db.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('snpdb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnnotationRangeLock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AnnotationRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('status', models.CharField(choices=[('C', 'Created'), ('x', 'Deleting'), ('d', 'Dump Started'), ('D', 'Dump Completed'), ('a', 'Annotation Started'), ('A', 'Annotation Completed'), ('U', 'Upload Started'), ('F', 'Finished'), ('E', 'Error')], default='C', max_length=1)),
                ('task_id', models.CharField(max_length=36, null=True)),
                ('dump_start', models.DateTimeField(null=True)),
                ('dump_end', models.DateTimeField(null=True)),
                ('annotation_start', models.DateTimeField(null=True)),
                ('annotation_end', models.DateTimeField(null=True)),
                ('upload_start', models.DateTimeField(null=True)),
                ('upload_end', models.DateTimeField(null=True)),
                ('upload_attempts', models.IntegerField(default=0)),
                ('pipeline_command', models.TextField(null=True)),
                ('pipeline_stdout', models.TextField(null=True)),
                ('pipeline_stderr', models.TextField(null=True)),
                ('error_exception', models.TextField(null=True)),
                ('vcf_dump_filename', models.TextField(null=True)),
                ('vcf_annotated_filename', models.TextField(null=True)),
                ('variant_count', models.IntegerField(null=True)),
                ('celery_task_logs', models.JSONField(default=dict)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnnotationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CachedCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('json_string', models.TextField()),
                ('has_error', models.BooleanField(blank=True, default=False)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CachedWebResource',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('citation_source', models.CharField(choices=[('P', 'PubMed'), ('N', 'NCBIBookShelf'), ('C', 'PubMedCentral')], max_length=1)),
                ('citation_id', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ClinVar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinvar_variation_id', models.IntegerField()),
                ('clinvar_allele_id', models.IntegerField()),
                ('clinvar_preferred_disease_name', models.TextField(blank=True, null=True)),
                ('clinvar_disease_database_name', models.TextField(blank=True, null=True)),
                ('clinvar_review_status', models.CharField(choices=[('N', 'No assertion provided'), ('C', 'No assertion criteria provided'), ('I', 'No interpretation for the single variant'), ('C', 'Criteria provided - conflicting interpretations'), ('S', 'Criteria provided - single submitter'), ('M', 'Criteria provided - multiple submitters w/no conflicts'), ('E', 'Reviewed by expert panel'), ('P', 'Practice guideline')], max_length=1)),
                ('clinical_significance', models.TextField(blank=True, null=True)),
                ('highest_pathogenicity', models.IntegerField(default=0)),
                ('clinvar_clinical_sources', models.TextField(blank=True, null=True)),
                ('clinvar_origin', models.IntegerField(default=0)),
                ('clinvar_suspect_reason_code', models.IntegerField(default=0)),
                ('drug_response', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ClinVarCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinvar_variation_id', models.IntegerField()),
                ('clinvar_allele_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='ClinVarCitationsCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ClinVarVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('annotation_date', models.DateTimeField(auto_now_add=True)),
                ('filename', models.TextField()),
                ('md5_hash', models.CharField(max_length=32)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CohortGeneCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processing_status', models.CharField(choices=[('C', 'Created'), ('P', 'Processing'), ('E', 'Error'), ('S', 'Success'), ('K', 'Skipped'), ('T', 'Terminated Early'), ('Z', 'Timed Out')], default='C', max_length=1)),
                ('cohort_version', models.IntegerField()),
                ('celery_task', models.CharField(max_length=36, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ColumnVCFInfo',
            fields=[
                ('info_id', models.TextField(primary_key=True, serialize=False)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('I', 'Integer'), ('F', 'Float'), ('B', 'Flag'), ('C', 'Character'), ('S', 'String')], max_length=1)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ColumnVEPField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('column', models.TextField(unique=True)),
                ('category', models.CharField(choices=[('C', 'Conservation'), ('E', 'External ID'), ('F', 'Frequency Data'), ('G', 'Gene Annotations'), ('H', 'HGVS'), ('L', 'Literature'), ('N', 'Nearby Features'), ('P', 'Pathogenicity Predictions'), ('Y', 'Phenotype'), ('D', 'Protein Domains'), ('Q', 'Sequence'), ('S', 'Splicing Predictions'), ('V', 'Variant Data')], max_length=1)),
                ('source_field', models.TextField(null=True)),
                ('source_field_processing_description', models.TextField(null=True)),
                ('vep_plugin', models.CharField(choices=[('d', 'dbNSFP'), ('v', 'dbscSNV'), ('g', 'Grantham'), ('l', 'LoFtool'), ('n', 'Mastermind'), ('m', 'MaxEntScan'), ('a', 'SpliceAI'), ('s', 'SpliceRegion')], max_length=1, null=True)),
                ('vep_custom', models.CharField(choices=[('g', 'gnomAD'), ('1', 'phastCons100way'), ('2', 'phastCons30way'), ('3', 'phastCons46way'), ('4', 'phyloP100way'), ('5', 'phyloP30way'), ('6', 'phyloP46way'), ('r', 'RepeatMasker'), ('t', 'TopMed'), ('u', 'UK10k'), ('c', 'COSMIC')], max_length=1, null=True)),
                ('source_field_has_custom_prefix', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CreatedManualVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DescriptionProcessingStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DiseaseValidity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_phenotype', models.TextField(blank=True)),
                ('sop', models.TextField(blank=True)),
                ('classification', models.CharField(choices=[('D', 'Definitive'), ('S', 'Strong'), ('M', 'Moderate'), ('L', 'Limited'), ('N', 'No Reported Evidence'), ('R', 'Refuted'), ('P', 'Disputed')], max_length=1)),
                ('date', models.DateField(null=True)),
                ('validity_summary_url', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='EnsemblGeneAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hgnc_symbol', models.TextField(null=True)),
                ('external_gene_name', models.TextField(null=True)),
                ('hgnc_symbol_lower', models.TextField(null=True)),
                ('hgnc_name', models.TextField(null=True)),
                ('synonyms', models.TextField(null=True)),
                ('previous_symbols', models.TextField(null=True)),
                ('hgnc_chromosome', models.TextField(null=True)),
                ('gene_family_tag', models.TextField(null=True)),
                ('gene_family_description', models.TextField(null=True)),
                ('hgnc_id', models.TextField(null=True)),
                ('entrez_gene_id', models.IntegerField(null=True)),
                ('uniprot_id', models.TextField(null=True)),
                ('ucsc_id', models.TextField(null=True)),
                ('omim_id', models.TextField(null=True)),
                ('enzyme_ids', models.TextField(null=True)),
                ('ccds_ids', models.TextField(null=True)),
                ('rgd_id', models.TextField(null=True)),
                ('mgi_id', models.TextField(null=True)),
                ('rvis_percentile', models.TextField(null=True)),
                ('refseq_gene_summary', models.TextField(null=True)),
                ('function_from_uniprotkb', models.TextField(null=True)),
                ('pathway_from_uniprotkb', models.TextField(null=True)),
                ('tissue_specificity_from_uniprotkb', models.TextField(null=True)),
                ('phenotypes_from_ensembl', models.TextField(null=True)),
                ('omim_phenotypes', models.TextField(null=True)),
                ('gene_biotype', models.TextField(null=True)),
                ('status', models.CharField(choices=[('K', 'KNOWN'), ('N', 'NOVEL'), ('P', 'PUTATIVE')], max_length=1, null=True)),
                ('chromosome_name', models.TextField(null=True)),
                ('start_position', models.IntegerField(null=True)),
                ('end_position', models.IntegerField(null=True)),
                ('band', models.TextField(null=True)),
                ('strand', models.CharField(choices=[('+', '+'), ('-', '-')], max_length=1, null=True)),
                ('percentage_gc_content', models.FloatField(null=True)),
                ('transcript_count', models.IntegerField(null=True)),
                ('in_cancer_gene_census', models.BooleanField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EnsemblGeneAnnotationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('annotation_date', models.DateTimeField(auto_now_add=True)),
                ('filename', models.TextField()),
                ('md5_hash', models.CharField(max_length=32)),
                ('ensembl_version', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeneCountType',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('celery_task_name', models.TextField(null=True)),
                ('enabled', models.BooleanField(default=False)),
                ('uses_variant_classifications', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='GeneDiseaseCurator',
            fields=[
                ('name', models.TextField(primary_key=True, serialize=False)),
                ('css_class', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeneDiseaseValidity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GeneDiseaseValidityEvidence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GeneSymbolCitation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GeneSymbolPubMedCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('count', models.IntegerField()),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeneValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('rgb', models.CharField(max_length=7)),
                ('show_counts', models.BooleanField(default=True)),
                ('use_as_empty_value', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='GeneValueCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='GeneValueCountCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='HPOEdge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HPOSynonym',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('scope', models.CharField(choices=[('B', 'Broad'), ('E', 'Exact'), ('N', 'Narrow'), ('R', 'Related')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='HumanPhenotypeOntology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True)),
                ('definition', models.TextField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, django_dag.models.NodeBase),
        ),
        migrations.CreateModel(
            name='HumanProteinAtlasAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abundance', models.CharField(choices=[('N', 'Not detected'), ('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='HumanProteinAtlasAnnotationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('annotation_date', models.DateTimeField(auto_now_add=True)),
                ('filename', models.TextField()),
                ('md5_hash', models.CharField(max_length=32)),
                ('hpa_version', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HumanProteinAtlasTissueSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ManualVariantEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.IntegerField()),
                ('entry_text', models.TextField()),
                ('error_message', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ManualVariantEntryCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('celery_task', models.CharField(max_length=36, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MIMGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MIMMorbid',
            fields=[
                ('accession', models.IntegerField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MIMMorbidAlias',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MonarchDiseaseOntology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('definition', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MutationalSignatureInfo',
            fields=[
                ('signature_id', models.IntegerField(primary_key=True, serialize=False)),
                ('cancer_types', models.TextField()),
                ('proposed_aetiology', models.TextField()),
                ('additional_mutational_features', models.TextField()),
                ('comments', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PatientTextPhenotype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_text', models.TextField()),
                ('status', models.CharField(choices=[('C', 'Created'), ('T', 'Tokenized'), ('E', 'Error'), ('S', 'Success')], max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeMatchTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeMIM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SampleClinVarAnnotationStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinvar_count', models.IntegerField(default=0)),
                ('ref_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('hom_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('het_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('unk_clinvar_pathogenic_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleClinVarAnnotationStatsPassingFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinvar_count', models.IntegerField(default=0)),
                ('ref_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('hom_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('het_clinvar_pathogenic_count', models.IntegerField(default=0)),
                ('unk_clinvar_pathogenic_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleEnsemblGeneAnnotationStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_count', models.IntegerField(default=0)),
                ('ref_omim_phenotype_count', models.IntegerField(default=0)),
                ('hom_omim_phenotype_count', models.IntegerField(default=0)),
                ('het_omim_phenotype_count', models.IntegerField(default=0)),
                ('unk_omim_phenotype_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleEnsemblGeneAnnotationStatsPassingFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_count', models.IntegerField(default=0)),
                ('ref_omim_phenotype_count', models.IntegerField(default=0)),
                ('hom_omim_phenotype_count', models.IntegerField(default=0)),
                ('het_omim_phenotype_count', models.IntegerField(default=0)),
                ('unk_omim_phenotype_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleVariantAnnotationStats',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant_dbsnp_count', models.IntegerField(default=0)),
                ('insertions_dbsnp_count', models.IntegerField(default=0)),
                ('snp_dbsnp_count', models.IntegerField(default=0)),
                ('deletions_dbsnp_count', models.IntegerField(default=0)),
                ('ref_high_or_moderate_count', models.IntegerField(default=0)),
                ('het_high_or_moderate_count', models.IntegerField(default=0)),
                ('hom_high_or_moderate_count', models.IntegerField(default=0)),
                ('unk_high_or_moderate_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleVariantAnnotationStatsPassingFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant_dbsnp_count', models.IntegerField(default=0)),
                ('insertions_dbsnp_count', models.IntegerField(default=0)),
                ('snp_dbsnp_count', models.IntegerField(default=0)),
                ('deletions_dbsnp_count', models.IntegerField(default=0)),
                ('ref_high_or_moderate_count', models.IntegerField(default=0)),
                ('het_high_or_moderate_count', models.IntegerField(default=0)),
                ('hom_high_or_moderate_count', models.IntegerField(default=0)),
                ('unk_high_or_moderate_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextPhenotype',
            fields=[
                ('text', models.TextField(primary_key=True, serialize=False)),
                ('processed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TextPhenotypeMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('H', 'HPO'), ('O', 'OMIM'), ('G', 'Gene')], max_length=1)),
                ('offset_start', models.IntegerField()),
                ('offset_end', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TextPhenotypeSentence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentence_offset', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='VariantAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amino_acids', models.TextField(blank=True, null=True)),
                ('cadd_phred', models.FloatField(blank=True, null=True)),
                ('cadd_raw', models.FloatField(blank=True, null=True)),
                ('canonical', models.BooleanField(blank=True, null=True)),
                ('codons', models.TextField(blank=True, null=True)),
                ('consequence', models.TextField(blank=True, null=True)),
                ('dbsnp_rs_id', models.TextField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('domains', models.TextField(blank=True, null=True)),
                ('ensembl_protein', models.TextField(blank=True, null=True)),
                ('exon', models.TextField(blank=True, null=True)),
                ('fathmm_pred', models.TextField(blank=True, null=True)),
                ('fathmm_pred_most_damaging', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
                ('flags', models.TextField(blank=True, null=True)),
                ('gene_text', models.TextField(blank=True, null=True)),
                ('gerp_pp_rs', models.FloatField(blank=True, null=True)),
                ('grantham', models.IntegerField(blank=True, null=True)),
                ('hgnc_id', models.IntegerField(blank=True, null=True)),
                ('hgvs_c', models.TextField(blank=True, null=True)),
                ('hgvs_p', models.TextField(blank=True, null=True)),
                ('impact', models.CharField(blank=True, choices=[('O', 'MODIFIER'), ('L', 'LOW'), ('M', 'MODERATE'), ('H', 'HIGH')], max_length=1, null=True)),
                ('interpro_domain', models.TextField(blank=True, null=True)),
                ('intron', models.TextField(blank=True, null=True)),
                ('loftool', models.FloatField(blank=True, null=True)),
                ('maxentscan_alt', models.FloatField(blank=True, null=True)),
                ('maxentscan_diff', models.FloatField(blank=True, null=True)),
                ('maxentscan_ref', models.FloatField(blank=True, null=True)),
                ('maxentscan_percent_diff_ref', models.FloatField(blank=True, null=True)),
                ('mutation_assessor_pred', models.TextField(blank=True, null=True)),
                ('mutation_assessor_pred_most_damaging', models.CharField(blank=True, choices=[('N', 'Neutral'), ('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=1, null=True)),
                ('mutation_taster_pred', models.TextField(blank=True, null=True)),
                ('mutation_taster_pred_most_damaging', models.CharField(blank=True, choices=[('P', 'Polymorphism (automatic)'), ('N', 'Polymorphism'), ('D', 'Disease Causing'), ('A', 'Disease causing (automatic)')], max_length=1, null=True)),
                ('predictions_num_pathogenic', models.IntegerField(default=0)),
                ('predictions_num_benign', models.IntegerField(default=0)),
                ('phylop_30_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phylop_46_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phylop_100_way_vertebrate', models.FloatField(blank=True, null=True)),
                ('phastcons_30_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phastcons_46_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phastcons_100_way_vertebrate', models.FloatField(blank=True, null=True)),
                ('polyphen2_hvar_pred', models.TextField(blank=True, null=True)),
                ('polyphen2_hvar_pred_most_damaging', models.CharField(blank=True, choices=[('B', 'Benign'), ('P', 'Possibly Damaging'), ('D', 'Probably Damaging')], max_length=1, null=True)),
                ('pubmed', models.TextField(blank=True, null=True)),
                ('protein_position', models.TextField(blank=True, null=True)),
                ('revel_score', models.FloatField(blank=True, null=True)),
                ('sift', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
                ('splice_region', models.TextField(blank=True, null=True)),
                ('swissprot', models.TextField(blank=True, null=True)),
                ('symbol', models.TextField(blank=True, null=True)),
                ('symbol_source', models.TextField(blank=True, null=True)),
                ('trembl', models.TextField(blank=True, null=True)),
                ('uniparc', models.TextField(blank=True, null=True)),
                ('af_1kg', models.FloatField(blank=True, null=True)),
                ('af_uk10k', models.FloatField(blank=True, null=True)),
                ('gnomad_af', models.FloatField(blank=True, null=True)),
                ('gnomad_hom_alt', models.IntegerField(blank=True, null=True)),
                ('gnomad_afr_af', models.FloatField(blank=True, null=True)),
                ('gnomad_amr_af', models.FloatField(blank=True, null=True)),
                ('gnomad_asj_af', models.FloatField(blank=True, null=True)),
                ('gnomad_eas_af', models.FloatField(blank=True, null=True)),
                ('gnomad_fin_af', models.FloatField(blank=True, null=True)),
                ('gnomad_nfe_af', models.FloatField(blank=True, null=True)),
                ('gnomad_oth_af', models.FloatField(blank=True, null=True)),
                ('gnomad_sas_af', models.FloatField(blank=True, null=True)),
                ('gnomad_popmax_af', models.FloatField(blank=True, null=True)),
                ('topmed_af', models.FloatField(blank=True, null=True)),
                ('gnomad_filtered', models.BooleanField(blank=True, null=True)),
                ('gnomad_popmax', models.CharField(blank=True, choices=[('AFR', 'African/African American'), ('ASJ', 'Ashkenazi Jewish'), ('EAS', 'East Asian'), ('FIN', 'Finnish'), ('AMR', 'Latino / Mixed Amerindian'), ('NFE', 'Non-Finnish European'), ('OTH', 'Other'), ('SAS', 'South Asian')], max_length=3, null=True)),
                ('dbscsnv_ada_score', models.FloatField(blank=True, null=True)),
                ('dbscsnv_rf_score', models.FloatField(blank=True, null=True)),
                ('cosmic_id', models.TextField(blank=True, null=True)),
                ('cosmic_legacy_id', models.TextField(blank=True, null=True)),
                ('cosmic_count', models.IntegerField(blank=True, null=True)),
                ('mastermind_count_1_cdna', models.IntegerField(blank=True, null=True)),
                ('mastermind_count_2_cdna_prot', models.IntegerField(blank=True, null=True)),
                ('mastermind_count_3_aa_change', models.IntegerField(blank=True, null=True)),
                ('mastermind_mmid3', models.TextField(blank=True, null=True)),
                ('spliceai_pred_dp_ag', models.IntegerField(blank=True, null=True)),
                ('spliceai_pred_dp_al', models.IntegerField(blank=True, null=True)),
                ('spliceai_pred_dp_dg', models.IntegerField(blank=True, null=True)),
                ('spliceai_pred_dp_dl', models.IntegerField(blank=True, null=True)),
                ('spliceai_pred_ds_ag', models.FloatField(blank=True, null=True)),
                ('spliceai_pred_ds_al', models.FloatField(blank=True, null=True)),
                ('spliceai_pred_ds_dg', models.FloatField(blank=True, null=True)),
                ('spliceai_pred_ds_dl', models.FloatField(blank=True, null=True)),
                ('repeat_masker', models.TextField(blank=True, null=True)),
                ('overlapping_symbols', models.TextField(blank=True, null=True)),
                ('somatic', models.BooleanField(blank=True, null=True)),
                ('variant_class', models.CharField(choices=[('SN', 'SNV'), ('GM', 'genetic_marker'), ('SU', 'substitution'), ('TR', 'tandem_repeat'), ('AI', 'Alu_insertion'), ('CA', 'complex_structural_alteration'), ('CS', 'complex_substitution'), ('CG', 'copy_number_gain'), ('CL', 'copy_number_loss'), ('CN', 'copy_number_variation'), ('DU', 'duplication'), ('IB', 'interchromosomal_breakpoint'), ('IT', 'interchromosomal_translocation'), ('CB', 'intrachromosomal_breakpoint'), ('CT', 'intrachromosomal_translocation'), ('IN', 'inversion'), ('LO', 'loss_of_heterozygosity'), ('MD', 'mobile_element_deletion'), ('MI', 'mobile_element_insertion'), ('NI', 'novel_sequence_insertion'), ('ST', 'short_tandem_repeat_variation'), ('TD', 'tandem_duplication'), ('TL', 'translocation'), ('DE', 'deletion'), ('ND', 'indel'), ('IS', 'insertion'), ('SA', 'sequence_alteration'), ('PR', 'probe')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='VariantAnnotationVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('annotation_date', models.DateTimeField(auto_now_add=True)),
                ('annotation_consortium', models.CharField(choices=[('R', 'RefSeq'), ('E', 'Ensembl')], max_length=1)),
                ('last_checked_date', models.DateTimeField(null=True)),
                ('vep', models.IntegerField()),
                ('ensembl', models.TextField()),
                ('ensembl_funcgen', models.TextField()),
                ('ensembl_variation', models.TextField()),
                ('ensembl_io', models.TextField()),
                ('thousand_genomes', models.TextField()),
                ('cosmic', models.IntegerField()),
                ('hgmd', models.TextField()),
                ('assembly', models.TextField()),
                ('dbsnp', models.IntegerField()),
                ('gencode', models.TextField()),
                ('genebuild', models.TextField()),
                ('gnomad', models.TextField()),
                ('refseq', models.TextField(blank=True)),
                ('regbuild', models.TextField()),
                ('sift', models.TextField()),
                ('dbnsfp', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariantGeneOverlap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='VariantSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='VersionDiff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_added', models.IntegerField()),
                ('num_modified', models.IntegerField()),
                ('num_removed', models.IntegerField()),
                ('num_unchanged', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='EnsemblGeneAnnotationVersionDiff',
            fields=[
                ('versiondiff_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotation.versiondiff')),
            ],
            bases=('annotation.versiondiff',),
        ),
        migrations.CreateModel(
            name='SampleAnnotationVersionVariantSource',
            fields=[
                ('variantsource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotation.variantsource')),
            ],
            bases=('annotation.variantsource',),
        ),
        migrations.CreateModel(
            name='VariantAnnotationVersionDiff',
            fields=[
                ('versiondiff_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='annotation.versiondiff')),
            ],
            bases=('annotation.versiondiff',),
        ),
        migrations.CreateModel(
            name='VersionDiffFromToResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_from', models.TextField(null=True)),
                ('value_to', models.TextField(null=True)),
                ('count', models.IntegerField()),
                ('version_diff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='annotation.versiondiff')),
                ('vg_column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantgridcolumn')),
            ],
        ),
        migrations.CreateModel(
            name='VersionDiffChangeCountResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('version_diff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='annotation.versiondiff')),
                ('vg_column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantgridcolumn')),
            ],
        ),
        migrations.CreateModel(
            name='VariantTranscriptAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amino_acids', models.TextField(blank=True, null=True)),
                ('cadd_phred', models.FloatField(blank=True, null=True)),
                ('cadd_raw', models.FloatField(blank=True, null=True)),
                ('canonical', models.BooleanField(blank=True, null=True)),
                ('codons', models.TextField(blank=True, null=True)),
                ('consequence', models.TextField(blank=True, null=True)),
                ('dbsnp_rs_id', models.TextField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('domains', models.TextField(blank=True, null=True)),
                ('ensembl_protein', models.TextField(blank=True, null=True)),
                ('exon', models.TextField(blank=True, null=True)),
                ('fathmm_pred', models.TextField(blank=True, null=True)),
                ('fathmm_pred_most_damaging', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
                ('flags', models.TextField(blank=True, null=True)),
                ('gene_text', models.TextField(blank=True, null=True)),
                ('gerp_pp_rs', models.FloatField(blank=True, null=True)),
                ('grantham', models.IntegerField(blank=True, null=True)),
                ('hgnc_id', models.IntegerField(blank=True, null=True)),
                ('hgvs_c', models.TextField(blank=True, null=True)),
                ('hgvs_p', models.TextField(blank=True, null=True)),
                ('impact', models.CharField(blank=True, choices=[('O', 'MODIFIER'), ('L', 'LOW'), ('M', 'MODERATE'), ('H', 'HIGH')], max_length=1, null=True)),
                ('interpro_domain', models.TextField(blank=True, null=True)),
                ('intron', models.TextField(blank=True, null=True)),
                ('loftool', models.FloatField(blank=True, null=True)),
                ('maxentscan_alt', models.FloatField(blank=True, null=True)),
                ('maxentscan_diff', models.FloatField(blank=True, null=True)),
                ('maxentscan_ref', models.FloatField(blank=True, null=True)),
                ('maxentscan_percent_diff_ref', models.FloatField(blank=True, null=True)),
                ('mutation_assessor_pred', models.TextField(blank=True, null=True)),
                ('mutation_assessor_pred_most_damaging', models.CharField(blank=True, choices=[('N', 'Neutral'), ('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=1, null=True)),
                ('mutation_taster_pred', models.TextField(blank=True, null=True)),
                ('mutation_taster_pred_most_damaging', models.CharField(blank=True, choices=[('P', 'Polymorphism (automatic)'), ('N', 'Polymorphism'), ('D', 'Disease Causing'), ('A', 'Disease causing (automatic)')], max_length=1, null=True)),
                ('predictions_num_pathogenic', models.IntegerField(default=0)),
                ('predictions_num_benign', models.IntegerField(default=0)),
                ('phylop_30_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phylop_46_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phylop_100_way_vertebrate', models.FloatField(blank=True, null=True)),
                ('phastcons_30_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phastcons_46_way_mammalian', models.FloatField(blank=True, null=True)),
                ('phastcons_100_way_vertebrate', models.FloatField(blank=True, null=True)),
                ('polyphen2_hvar_pred', models.TextField(blank=True, null=True)),
                ('polyphen2_hvar_pred_most_damaging', models.CharField(blank=True, choices=[('B', 'Benign'), ('P', 'Possibly Damaging'), ('D', 'Probably Damaging')], max_length=1, null=True)),
                ('pubmed', models.TextField(blank=True, null=True)),
                ('protein_position', models.TextField(blank=True, null=True)),
                ('revel_score', models.FloatField(blank=True, null=True)),
                ('sift', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
                ('splice_region', models.TextField(blank=True, null=True)),
                ('swissprot', models.TextField(blank=True, null=True)),
                ('symbol', models.TextField(blank=True, null=True)),
                ('symbol_source', models.TextField(blank=True, null=True)),
                ('trembl', models.TextField(blank=True, null=True)),
                ('uniparc', models.TextField(blank=True, null=True)),
                ('annotation_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='annotation.annotationrun')),
            ],
        ),
    ]
