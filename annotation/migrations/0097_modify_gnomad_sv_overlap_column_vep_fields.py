# Generated by Django 4.2.10 on 2024-03-26 03:57

from django.db import migrations
from django.db.models import Func, Value, F
from django.db.models.functions import Concat

from library.django_utils import bulk_insert_class_data

_NEW_COLUMNS = ['gnomad_sv_overlap_coords', 'gnomad_sv_overlap_filters']


def _modify_gnomad_sv_overlap_column_vep_fields(apps, _schema_editor):
    ColumnVEPField = apps.get_model("annotation", "ColumnVEPField")

    VEP_PLUGIN_STRUCTURALVARIANTOVERLAP = 'o'  # This has been removed last migration
    VEP_CUSTOM_GNOMAD_SV = 'S'
    VEP_CUSTOM_GNOMAD_SV_NAME = 'N'
    VEP_CUSTOM_REPEAT_MASKER = 'r'

    # All set to new custom
    source_field_replace_func = Func(F('source_field'), Value('SV_overlap_'), Value(''), function='REPLACE')

    ColumnVEPField.objects.filter(vep_plugin=VEP_PLUGIN_STRUCTURALVARIANTOVERLAP).update(vep_plugin=None,
                                                                                         vep_custom=VEP_CUSTOM_GNOMAD_SV,
                                                                                         source_field=source_field_replace_func,
                                                                                         source_field_has_custom_prefix=True)
    SV_OVERLAP_NAME = "gnomad_sv_overlap_name"  # This has to go to VEP_CUSTOM_GNOMAD_SV_NAME
    ColumnVEPField.objects.filter(variant_grid_column=SV_OVERLAP_NAME).update(vep_custom=VEP_CUSTOM_GNOMAD_SV_NAME,
                                                                              source_field='gnomAD_SV_name',
                                                                              source_field_has_custom_prefix=False)

    # This is now a calculated field from coords
    ColumnVEPField.objects.filter(variant_grid_column="gnomad_sv_overlap_percent").update(source_field='')

    # OK to run this for SVs as well
    ColumnVEPField.objects.filter(vep_custom=VEP_CUSTOM_REPEAT_MASKER).update(pipeline_type=None)

    # Insert the new CVFs
    VARIANT_ANNOTATION_PIPELINE_TYPE_CNV = 'C'
    FREQUENCY_DATA = 'F'

    COLUMN_VEP_FIELD = [
        {'column': 'gnomad_sv_overlap_coords', 'variant_grid_column_id': 'gnomad_sv_overlap_coords',
         'pipeline_type': VARIANT_ANNOTATION_PIPELINE_TYPE_CNV, 'category': FREQUENCY_DATA,
         'source_field': '', 'vep_custom': VEP_CUSTOM_GNOMAD_SV, 'source_field_has_custom_prefix': True},
    ]

    bulk_insert_class_data(apps, "annotation", [("ColumnVEPField", COLUMN_VEP_FIELD)])


def _reverse_modify_gnomad_sv_overlap_column_vep_fields(apps, _schema_editor):
    ColumnVEPField = apps.get_model("annotation", "ColumnVEPField")

    VEP_PLUGIN_STRUCTURALVARIANTOVERLAP = 'o'  # This has been removed last migration
    VEP_CUSTOM_GNOMAD_SV = 'S'
    VEP_CUSTOM_GNOMAD_SV_NAME = 'N'

    # Put things back
    source_field_func = Concat(Value('SV_overlap_'), F('source_field'))

    ColumnVEPField.objects.filter(vep_custom__in=[VEP_CUSTOM_GNOMAD_SV, VEP_CUSTOM_GNOMAD_SV_NAME]).update(vep_custom=None,
                                                                                                           vep_plugin=VEP_PLUGIN_STRUCTURALVARIANTOVERLAP,
                                                                                                           source_field=source_field_func,
                                                                                                           source_field_has_custom_prefix=False)
    ColumnVEPField.objects.filter(variant_grid_column="gnomad_sv_overlap_percent").update(source_field='SV_overlap_PC')

    ColumnVEPField.objects.filter(column__in=_NEW_COLUMNS).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('annotation', '0096_variantannotation_gnomad_sv_overlap_coords_and_more'),
        ('snpdb', '0122_new_gnomad_sv_overlap_column_vep_fields2'),
    ]

    operations = [
        migrations.RunPython(_modify_gnomad_sv_overlap_column_vep_fields,
                             reverse_code=_reverse_modify_gnomad_sv_overlap_column_vep_fields),
    ]
