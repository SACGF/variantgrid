# Generated by Django 3.1.3 on 2021-03-31 07:21

from django.db import migrations


def _one_off_classification_node(apps, schema_editor):
    ClassificationsNode = apps.get_model("analysis", "ClassificationsNode")

    # Copy pasting here so we can reuse code
    class ClinicalSignificance:
        OTHER = '0'
        BENIGN = '1'
        LIKELY_BENIGN = '2'
        VUS = '3'
        LIKELY_PATHOGENIC = '4'
        PATHOGENIC = '5'

        CHOICES = [
            (OTHER, 'Other'),
            (BENIGN, 'Benign'),
            (LIKELY_BENIGN, 'Likely Benign'),
            (VUS, 'VUS'),
            (LIKELY_PATHOGENIC, 'Likely Pathogenic'),
            (PATHOGENIC, 'Pathogenic'),
        ]

        CLASSIFICATION_FIELDS = {
            OTHER: 'other',
            BENIGN: 'benign',
            LIKELY_BENIGN: 'likely_benign',
            VUS: 'vus',
            LIKELY_PATHOGENIC: 'likely_pathogenic',
            PATHOGENIC: 'pathogenic'
        }

    class ClinicalSignificanceComparison:
        LESS_OR_EQUAL = "l"
        EQUAL = 'e'
        GREATER_OR_EQUAL = 'g'

        @staticmethod
        def get_clinical_significance_list(clinical_significance, comparison):
            """ Returns all if clinical_significance=None """
            clinical_significance_list = None
            if clinical_significance:
                if comparison == ClinicalSignificanceComparison.EQUAL:
                    clinical_significance_list = [clinical_significance]
                else:
                    clinical_significance_list = [c[0] for c in ClinicalSignificance.CHOICES]
                    i = clinical_significance_list.index(clinical_significance)
                    if comparison == ClinicalSignificanceComparison.LESS_OR_EQUAL:
                        clinical_significance_list = clinical_significance_list[:i + 1]
                    elif comparison == ClinicalSignificanceComparison.GREATER_OR_EQUAL:
                        clinical_significance_list = clinical_significance_list[i:]
            return clinical_significance_list

    # All others are show everything - which is default - so leave them
    for node in ClassificationsNode.objects.filter(clinical_significance__isnull=False):
        clin_sig = set(ClinicalSignificanceComparison.get_clinical_significance_list(node.clinical_significance,
                                                                                     node.comparison))
        for cs, field in ClinicalSignificance.CLASSIFICATION_FIELDS.items():
            setattr(node, field, cs in clin_sig)
        node.save()


class Migration(migrations.Migration):

    dependencies = [
        ('analysis', '0029_auto_20210331_1751'),
    ]

    operations = [
        migrations.RunPython(_one_off_classification_node)
    ]
