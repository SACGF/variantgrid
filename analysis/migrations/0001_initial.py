# Generated by Django 3.1 on 2020-09-29 05:34

import analysis.models.nodes.analysis_node
import analysis.models.nodes.cohort_mixin
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django_dag.models
import django_extensions.db.fields
import library.django_utils.guardian_permissions_mixin
import snpdb.models.models_columns


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('patients', '0001_initial'),
        ('expression', '0001_initial'),
        ('variantclassification', '0001_initial'),
        ('genes', '0001_initial'),
        ('pedigree', '0001_initial'),
        ('snpdb', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('annotation', '0002_auto_20200929_1503'),
    ]

    operations = [
        migrations.CreateModel(
            name='Analysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('analysis_type', models.CharField(blank=True, choices=[('S', 'Singleton'), ('C', 'Cohort'), ('T', 'Trio'), ('P', 'Pedigree')], max_length=1, null=True)),
                ('name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('show_igv_links', models.BooleanField(default=True)),
                ('analysis_panel_fraction', models.FloatField(default=0.25)),
                ('lock_input_sources', models.BooleanField(default=False)),
                ('visible', models.BooleanField(default=True)),
                ('template_type', models.CharField(blank=True, choices=[('T', 'Template'), ('S', 'Snapshot')], max_length=1, null=True)),
                ('annotation_version', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='annotation.annotationversion')),
                ('custom_columns_collection', models.ForeignKey(default=snpdb.models.models_columns.CustomColumnsCollection.get_system_default_id, on_delete=django.db.models.deletion.SET_DEFAULT, to='snpdb.customcolumnscollection')),
                ('default_sort_by_column', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.customcolumn')),
                ('genome_build', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.genomebuild')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(library.django_utils.guardian_permissions_mixin.GuardianPermissionsAutoInitialSaveMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnalysisEdge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnalysisNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField(blank=True)),
                ('x', models.IntegerField(default=analysis.models.nodes.analysis_node._default_position)),
                ('y', models.IntegerField(default=analysis.models.nodes.analysis_node._default_position)),
                ('version', models.IntegerField(default=0)),
                ('appearance_version', models.IntegerField(default=0)),
                ('auto_node_name', models.BooleanField(default=True)),
                ('output_node', models.BooleanField(default=False)),
                ('hide_node_and_descendants_upon_template_configuration_error', models.BooleanField(default=False)),
                ('ready', models.BooleanField(default=True)),
                ('valid', models.BooleanField(default=False)),
                ('visible', models.BooleanField(default=True)),
                ('count', models.IntegerField(default=None, null=True)),
                ('errors', models.TextField(null=True)),
                ('shadow_color', models.TextField(null=True)),
                ('load_seconds', models.FloatField(null=True)),
                ('parents_should_cache', models.BooleanField(default=False)),
                ('analysis_update_uuid', models.UUIDField(default=None, null=True)),
                ('status', models.CharField(choices=[('E', 'Error'), ('C', 'Configuration Error'), ('P', 'Parent Error'), ('N', 'Cancelled'), ('R', 'Ready'), ('D', 'Dirty'), ('Q', 'Queued'), ('H', 'Loading Cache'), ('L', 'Loading')], default='D', max_length=1)),
                ('celery_task', models.CharField(max_length=36, null=True)),
                ('db_pid', models.IntegerField(null=True)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysis')),
                ('children', models.ManyToManyField(blank=True, related_name='_parents', through='analysis.AnalysisEdge', to='analysis.AnalysisNode')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, django_dag.models.NodeBase),
        ),
        migrations.CreateModel(
            name='AnalysisTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='analysis.analysis')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(library.django_utils.guardian_permissions_mixin.GuardianPermissionsAutoInitialSaveMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnalysisTemplateRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysis')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KaryomappingAnalysis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.TextField()),
                ('trio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.trio')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(library.django_utils.guardian_permissions_mixin.GuardianPermissionsAutoInitialSaveMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MutationalSignature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('summary', models.TextField()),
                ('mean', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), null=True, size=None)),
                ('num_snps', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NodeAlleleFrequencyFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_operation', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
            ],
        ),
        migrations.CreateModel(
            name='NodeColumnSummaryCacheCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variant_column', models.TextField()),
                ('extra_filters', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NodeGraphType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('required_column', models.TextField(default='id')),
                ('graph_class', models.TextField()),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NodeHelp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_class_name', models.TextField()),
                ('help_text', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='NodeVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField()),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
            ],
            options={
                'unique_together': {('node', 'version')},
            },
        ),
        migrations.CreateModel(
            name='BuiltInFilterNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('built_in_filter', models.CharField(choices=[('C', 'ClinVar'), ('O', 'OMIM Phenotype'), ('I', 'High or Mod impact'), ('G', 'Classified'), ('P', 'Classified Pathogenic'), ('M', 'COSMIC')], max_length=1, null=True)),
                ('min_clinvar_stars', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='ClassificationsNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('clinical_significance', models.CharField(blank=True, choices=[('0', 'Other'), ('1', 'Benign'), ('2', 'Likely Benign'), ('3', 'VUS'), ('4', 'Likely Pathogenic'), ('5', 'Pathogenic')], max_length=1, null=True)),
                ('comparison', models.CharField(choices=[('l', 'Less or equal than'), ('e', 'Exactly'), ('g', 'Greater or equal than')], default='e', max_length=1)),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='CohortNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('min_ad', models.IntegerField(default=0)),
                ('min_dp', models.IntegerField(default=0)),
                ('min_gq', models.IntegerField(default=0)),
                ('max_pl', models.IntegerField(blank=True, null=True)),
                ('min_ad_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_dp_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_gq_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('max_pl_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('minimum_count', models.IntegerField(default=0)),
                ('maximum_count', models.IntegerField(null=True)),
                ('zygosity', models.CharField(choices=[('A', 'Het or Hom Alt'), ('Z', 'Any zygosity call'), ('O', 'Hom alt'), ('E', 'Het'), ('R', 'Ref')], default='A', max_length=1)),
                ('zygosity_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='L', max_length=1)),
                ('min_ref_count', models.IntegerField(blank=True, null=True)),
                ('max_ref_count', models.IntegerField(blank=True, null=True)),
                ('min_hom_count', models.IntegerField(blank=True, null=True)),
                ('max_hom_count', models.IntegerField(blank=True, null=True)),
                ('min_het_count', models.IntegerField(blank=True, null=True)),
                ('max_het_count', models.IntegerField(blank=True, null=True)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('cohort', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.cohort')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.CohortMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='DamageNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('impact_min', models.CharField(blank=True, choices=[('O', 'MODIFIER'), ('L', 'LOW'), ('M', 'MODERATE'), ('H', 'HIGH')], max_length=1, null=True)),
                ('always_keep_splice_variants_regardless_of_impact', models.BooleanField(default=True)),
                ('cadd_score_min', models.IntegerField(blank=True, null=True)),
                ('revel_score_min', models.FloatField(blank=True, null=True)),
                ('allow_null', models.BooleanField(default=False)),
                ('remove_low_complexity_regions', models.BooleanField(default=False)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('min_damage_predictions', models.IntegerField(blank=True, null=True)),
                ('sift_prediction', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
                ('polyphen2_prediction', models.CharField(blank=True, choices=[('B', 'Benign'), ('P', 'Possibly Damaging'), ('D', 'Probably Damaging')], max_length=1, null=True)),
                ('mutation_assessor_prediction', models.CharField(blank=True, choices=[('N', 'Neutral'), ('L', 'Low'), ('M', 'Medium'), ('H', 'High')], max_length=1, null=True)),
                ('mutation_taster_prediction', models.CharField(blank=True, choices=[('P', 'Polymorphism (automatic)'), ('N', 'Polymorphism'), ('D', 'Disease Causing'), ('A', 'Disease causing (automatic)')], max_length=1, null=True)),
                ('fathmm_prediction', models.CharField(blank=True, choices=[('T', 'Tolerated'), ('D', 'Damaging')], max_length=1, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='FilterNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('group_operation', models.CharField(max_length=3)),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='GeneListNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('has_gene_coverage', models.BooleanField(null=True)),
                ('exclude', models.BooleanField(default=False)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('custom_text_gene_list', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='genes.customtextgenelist')),
                ('pathology_test_gene_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pathology_test_gene_list', to='genes.genelist')),
                ('sample', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.AncestorSampleMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='MergeNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='PhenotypeNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('text_phenotype', models.TextField(blank=True, null=True)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='patients.patient')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='PopulationNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('percent', models.FloatField(default=100.0)),
                ('group_operation', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('gnomad_af', models.BooleanField(default=True)),
                ('gnomad_popmax_af', models.BooleanField(default=False)),
                ('gnomad_hom_alt_max', models.IntegerField(blank=True, null=True)),
                ('af_1kg', models.BooleanField(default=True)),
                ('af_uk10k', models.BooleanField(default=True)),
                ('topmed_af', models.BooleanField(default=False)),
                ('zygosity', models.CharField(choices=[('A', 'Het or Hom Alt'), ('Z', 'Any zygosity call'), ('O', 'Hom alt'), ('E', 'Het'), ('R', 'Ref')], default='A', max_length=1)),
                ('use_internal_counts', models.BooleanField(default=False)),
                ('max_samples', models.IntegerField(blank=True, null=True)),
                ('internal_percent', models.FloatField(default=100.0)),
                ('keep_internally_classified_pathogenic', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='SelectedInParentNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='VariantTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysis')),
                ('node', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='analysis.analysisnode')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NodeWiki',
            fields=[
                ('wiki_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='snpdb.wiki')),
                ('node', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('snpdb.wiki',),
        ),
        migrations.CreateModel(
            name='NodeVCFFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
                ('vcf_filter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='snpdb.vcffilter')),
            ],
        ),
        migrations.CreateModel(
            name='NodeVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variant')),
            ],
        ),
        migrations.CreateModel(
            name='NodeGenesCountCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodeversion')),
            ],
        ),
        migrations.CreateModel(
            name='NodeGenesCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodegenescountcollection')),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='genes.gene')),
            ],
        ),
        migrations.CreateModel(
            name='NodeColumnSummaryData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(null=True)),
                ('count', models.IntegerField()),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodecolumnsummarycachecollection')),
            ],
        ),
        migrations.AddField(
            model_name='nodecolumnsummarycachecollection',
            name='node_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodeversion'),
        ),
        migrations.CreateModel(
            name='NodeCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('node_version', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodeversion')),
                ('variant_collection', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.variantcollection')),
            ],
        ),
        migrations.CreateModel(
            name='NodeAlleleFrequencyRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min', models.IntegerField()),
                ('max', models.IntegerField()),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodeallelefrequencyfilter')),
            ],
        ),
        migrations.CreateModel(
            name='MutationalSignatureMutationCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mutation_type', models.TextField()),
                ('count', models.IntegerField()),
                ('mutational_signature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.mutationalsignature')),
            ],
        ),
        migrations.CreateModel(
            name='MutationalSignatureCalculator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('version', models.TextField()),
                ('num_iterations', models.IntegerField()),
                ('sampling_fraction', models.FloatField()),
                ('signature_data_filename', models.TextField()),
                ('minimisation_strategy', models.CharField(choices=[('LS', 'Least Squares'), ('LA', 'Least Absolute Values')], max_length=2)),
            ],
            options={
                'unique_together': {('name', 'version', 'num_iterations', 'sampling_fraction', 'signature_data_filename', 'minimisation_strategy')},
            },
        ),
        migrations.AddField(
            model_name='mutationalsignature',
            name='calculator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.mutationalsignaturecalculator'),
        ),
        migrations.AddField(
            model_name='mutationalsignature',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample'),
        ),
        migrations.CreateModel(
            name='KaryomappingGene',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upstream_kb', models.IntegerField(default=0)),
                ('downstream_kb', models.IntegerField(default=0)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='genes.gene')),
                ('karyomapping_analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.karyomappinganalysis')),
            ],
        ),
        migrations.CreateModel(
            name='GenomeKaryomappingCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('father_1_alt', models.IntegerField(null=True)),
                ('father_1_ref', models.IntegerField(null=True)),
                ('father_2_alt', models.IntegerField(null=True)),
                ('father_2_ref', models.IntegerField(null=True)),
                ('mother_1_alt', models.IntegerField(null=True)),
                ('mother_1_ref', models.IntegerField(null=True)),
                ('mother_2_alt', models.IntegerField(null=True)),
                ('mother_2_ref', models.IntegerField(null=True)),
                ('import_status', models.CharField(choices=[('C', 'created'), ('I', 'importing'), ('R', 'Requires user input'), ('E', 'error'), ('S', 'success'), ('M', 'Marked For Deletion'), ('D', 'Deleting')], default='C', max_length=1)),
                ('trio', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='snpdb.trio')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContigKaryomappingCounts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('father_1_alt', models.IntegerField(null=True)),
                ('father_1_ref', models.IntegerField(null=True)),
                ('father_2_alt', models.IntegerField(null=True)),
                ('father_2_ref', models.IntegerField(null=True)),
                ('mother_1_alt', models.IntegerField(null=True)),
                ('mother_1_ref', models.IntegerField(null=True)),
                ('mother_2_alt', models.IntegerField(null=True)),
                ('mother_2_ref', models.IntegerField(null=True)),
                ('contig', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.contig')),
                ('genome_karyomapping_counts', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.genomekaryomappingcounts')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CohortNodeZygosityFiltersCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cohort_version', models.IntegerField()),
                ('cohort', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohort')),
                ('cohort_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.cohortnode')),
            ],
            options={
                'unique_together': {('cohort_node', 'cohort')},
            },
        ),
        migrations.CreateModel(
            name='CohortNodeZygosityFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_in_grid', models.BooleanField(default=True)),
                ('zygosity_ref', models.BooleanField(default=True)),
                ('zygosity_het', models.BooleanField(default=True)),
                ('zygosity_hom', models.BooleanField(default=True)),
                ('zygosity_none', models.BooleanField(default=True)),
                ('cohort_sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.cohortsample')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.cohortnodezygosityfilterscollection')),
            ],
        ),
        migrations.CreateModel(
            name='AnalysisVariantClassification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysis')),
                ('variant_classification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='variantclassification.variantclassification')),
            ],
        ),
        migrations.CreateModel(
            name='AnalysisVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.TextField()),
                ('class_name', models.TextField()),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnode')),
            ],
            options={
                'ordering': ['node__analysis', 'node', 'field'],
                'unique_together': {('node', 'field')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisTemplateVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('version', models.IntegerField()),
                ('analysis_name_template', models.TextField(null=True)),
                ('active', models.BooleanField(default=True)),
                ('appears_in_autocomplete', models.BooleanField(default=True)),
                ('appears_in_links', models.BooleanField(default=False)),
                ('requires_sample_somatic', models.BooleanField(default=False)),
                ('requires_sample_gene_list', models.BooleanField(default=False)),
                ('analysis_snapshot', models.OneToOneField(null=True, on_delete=django.db.models.deletion.PROTECT, to='analysis.analysis')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysistemplate')),
            ],
            options={
                'unique_together': {('template', 'version')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisTemplateRunArgument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_pk', models.TextField(blank=True, null=True)),
                ('value', models.TextField()),
                ('error', models.TextField(null=True)),
                ('template_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysistemplaterun')),
                ('variable', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisvariable')),
            ],
        ),
        migrations.AddField(
            model_name='analysistemplaterun',
            name='template_version',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='analysis.analysistemplateversion'),
        ),
        migrations.CreateModel(
            name='AnalysisNodeCountConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysis')),
            ],
        ),
        migrations.CreateModel(
            name='AnalysisNodeCountConfigRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('built_in_filter', models.CharField(choices=[('T', 'Total'), ('C', 'ClinVar'), ('O', 'OMIM Phenotype'), ('I', 'High or Mod impact'), ('G', 'Classified'), ('P', 'Classified Pathogenic'), ('M', 'COSMIC')], max_length=1, null=True)),
                ('sort_order', models.IntegerField()),
                ('node_count_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysisnodecountconfiguration')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='analysisedge',
            name='child',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysisnode_parent', to='analysis.analysisnode'),
        ),
        migrations.AddField(
            model_name='analysisedge',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysisnode_child', to='analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='ZygosityNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('zygosity', models.CharField(choices=[('R', 'HOM_REF'), ('E', 'HET'), ('O', 'HOM_ALT'), ('U', '?'), ('M', 'Multiple hits in gene')], max_length=1, null=True)),
                ('exclude', models.BooleanField(default=False)),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.AncestorSampleMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='VennNodeCache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intersection_type', models.CharField(choices=[('A', 'A_ONLY'), ('I', 'INTERSECTION'), ('B', 'B_ONLY')], max_length=1, null=True)),
                ('parent_a_node_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='analysis.nodeversion')),
                ('parent_b_node_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='analysis.nodeversion')),
                ('variant_collection', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.variantcollection')),
            ],
            options={
                'unique_together': {('parent_a_node_version', 'parent_b_node_version', 'intersection_type')},
            },
        ),
        migrations.CreateModel(
            name='VennNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('set_operation', models.CharField(choices=[('0', 'none'), ('l', 'A-B'), ('&', '&'), ('a', 'A'), ('r', 'B-A'), ('^', '^'), ('b', 'B'), ('|', '|')], default='&', max_length=1)),
                ('left_parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='left_parent_node', to='analysis.analysisnode')),
                ('right_parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='right_parent_node', to='analysis.analysisnode')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='TrioNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('min_ad', models.IntegerField(default=0)),
                ('min_dp', models.IntegerField(default=0)),
                ('min_gq', models.IntegerField(default=0)),
                ('max_pl', models.IntegerField(blank=True, null=True)),
                ('min_ad_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_dp_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_gq_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('max_pl_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('inheritance', models.CharField(choices=[('R', 'Recessive'), ('C', 'C. Het'), ('D', 'Dominant'), ('N', 'Denovo'), ('P', 'Proband Het'), ('X', 'X-Linked Recessive')], default='R', max_length=1)),
                ('require_zygosity', models.BooleanField(default=True)),
                ('trio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.trio')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.CohortMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='TissueNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('min_abundance', models.CharField(choices=[('L', 'Low'), ('M', 'Medium'), ('H', 'High')], default='L', max_length=1)),
                ('text_tissue', models.TextField(blank=True, null=True)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('tissue_sample', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='annotation.humanproteinatlastissuesample')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='TagNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('analysis_wide', models.BooleanField(default=False)),
                ('tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.tag')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='SampleNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('min_ad', models.IntegerField(default=0)),
                ('min_dp', models.IntegerField(default=0)),
                ('min_gq', models.IntegerField(default=0)),
                ('max_pl', models.IntegerField(blank=True, null=True)),
                ('zygosity_ref', models.BooleanField(default=False)),
                ('zygosity_het', models.BooleanField(default=True)),
                ('zygosity_hom', models.BooleanField(default=True)),
                ('zygosity_unk', models.BooleanField(default=False)),
                ('restrict_to_qc_gene_list', models.BooleanField(default=False)),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.SampleMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='SampleAnalysisTemplateRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_template_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.analysistemplaterun')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='snpdb.sample')),
            ],
            options={
                'unique_together': {('sample', 'analysis_template_run')},
            },
        ),
        migrations.CreateModel(
            name='PopulationNodeGnomADPopulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('population', models.CharField(choices=[('AFR', 'African/African American'), ('ASJ', 'Ashkenazi Jewish'), ('EAS', 'East Asian'), ('FIN', 'Finnish'), ('AMR', 'Latino / Mixed Amerindian'), ('NFE', 'Non-Finnish European'), ('OTH', 'Other'), ('SAS', 'South Asian')], max_length=3)),
                ('population_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.populationnode')),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeNodeOMIM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mim_morbid_alias', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='annotation.mimmorbidalias')),
                ('phenotype_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.phenotypenode')),
            ],
        ),
        migrations.CreateModel(
            name='PhenotypeNodeHPO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hpo_synonym', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='annotation.hposynonym')),
                ('phenotype_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.phenotypenode')),
            ],
        ),
        migrations.CreateModel(
            name='PedigreeNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('min_ad', models.IntegerField(default=0)),
                ('min_dp', models.IntegerField(default=0)),
                ('min_gq', models.IntegerField(default=0)),
                ('max_pl', models.IntegerField(blank=True, null=True)),
                ('min_ad_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_dp_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('min_gq_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('max_pl_op', models.CharField(choices=[('L', 'All'), ('Y', 'Any')], default='Y', max_length=1)),
                ('inheritance_model', models.CharField(choices=[('R', 'Auto. Recessive'), ('D', 'Auto. Dominant')], max_length=2)),
                ('require_zygosity', models.BooleanField(default=True)),
                ('pedigree', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pedigree.pedigree')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.CohortMixin, 'analysis.analysisnode'),
        ),
        migrations.CreateModel(
            name='NodeCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=100)),
                ('count', models.IntegerField()),
                ('node_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.nodeversion')),
            ],
            options={
                'unique_together': {('node_version', 'label')},
            },
        ),
        migrations.CreateModel(
            name='MutationalSignatureMinimisationResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result_type', models.CharField(choices=[('F', 'Full'), ('B', 'Bootstrapped')], max_length=1)),
                ('iteration', models.IntegerField()),
                ('solution_array', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('fit_data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('diff_data', django.contrib.postgres.fields.ArrayField(base_field=models.FloatField(), size=None)),
                ('ls_sum_diff', models.FloatField()),
                ('la_sum_diff', models.FloatField()),
                ('mutational_signature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.mutationalsignature')),
            ],
            options={
                'unique_together': {('mutational_signature', 'result_type', 'iteration')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='mutationalsignature',
            unique_together={('sample', 'calculator')},
        ),
        migrations.CreateModel(
            name='IntersectionNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('hgvs_name', models.TextField(blank=True, null=True)),
                ('left', models.IntegerField(default=0)),
                ('right', models.IntegerField(default=0)),
                ('accordion_panel', models.IntegerField(default=0)),
                ('genomic_interval', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.genomicinterval')),
                ('genomic_intervals_collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.genomicintervalscollection')),
                ('hgvs_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.variant')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='GeneListNodeGeneList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gene_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='genes.genelist')),
                ('gene_list_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.genelistnode')),
            ],
        ),
        migrations.CreateModel(
            name='FilterNodeItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField()),
                ('operation', models.CharField(max_length=2)),
                ('field', models.TextField()),
                ('data', models.TextField()),
                ('filter_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='analysis.filternode')),
            ],
        ),
        migrations.CreateModel(
            name='ExpressionNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('comparison_type', models.CharField(choices=[('d', 'Differential Expression'), ('e', 'Expression Values')], default='d', max_length=1)),
                ('comparison_op', models.CharField(choices=[('eq', '='), ('le', '<='), ('lt', '<'), ('ge', '>='), ('gt', '>')], default='d', max_length=2)),
                ('direction', models.CharField(choices=[('+', 'Upregulated'), ('-', 'Downregulated')], default='+', max_length=1)),
                ('sample', models.CharField(choices=[('1', 'Sample_1'), ('2', 'Sample_2')], default='1', max_length=1)),
                ('significant', models.BooleanField(default=True)),
                ('value', models.FloatField(null=True)),
                ('expression_file', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='expression.cuffdifffile')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='AllVariantsNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('max_variant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.variant')),
            ],
            options={
                'abstract': False,
            },
            bases=('analysis.analysisnode',),
        ),
        migrations.CreateModel(
            name='AlleleFrequencyNode',
            fields=[
                ('analysisnode_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='analysis.analysisnode')),
                ('sample', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='snpdb.sample')),
            ],
            options={
                'abstract': False,
            },
            bases=(analysis.models.nodes.cohort_mixin.AncestorSampleMixin, 'analysis.analysisnode'),
        ),
    ]
